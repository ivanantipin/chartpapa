/* tslint:disable */
/* eslint-disable */
/**
 * demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    HAnnotation,
    HAnnotationFromJSON,
    HAnnotationFromJSONTyped,
    HAnnotationToJSON,
    HAxis,
    HAxisFromJSON,
    HAxisFromJSONTyped,
    HAxisToJSON,
    HChart,
    HChartFromJSON,
    HChartFromJSONTyped,
    HChartToJSON,
    HLegend,
    HLegendFromJSON,
    HLegendFromJSONTyped,
    HLegendToJSON,
    HNavigator,
    HNavigatorFromJSON,
    HNavigatorFromJSONTyped,
    HNavigatorToJSON,
    HRangeSelector,
    HRangeSelectorFromJSON,
    HRangeSelectorFromJSONTyped,
    HRangeSelectorToJSON,
    HScrollbar,
    HScrollbarFromJSON,
    HScrollbarFromJSONTyped,
    HScrollbarToJSON,
    HSeries,
    HSeriesFromJSON,
    HSeriesFromJSONTyped,
    HSeriesToJSON,
    HTitle,
    HTitleFromJSON,
    HTitleFromJSONTyped,
    HTitleToJSON,
} from './';

/**
 * 
 * @export
 * @interface HOptions
 */
export interface HOptions {
    /**
     * 
     * @type {HTitle}
     * @memberof HOptions
     */
    title?: HTitle;
    /**
     * 
     * @type {HRangeSelector}
     * @memberof HOptions
     */
    rangeSelector?: HRangeSelector;
    /**
     * 
     * @type {HChart}
     * @memberof HOptions
     */
    chart?: HChart;
    /**
     * 
     * @type {Array<HAxis>}
     * @memberof HOptions
     */
    yAxis: Array<HAxis>;
    /**
     * 
     * @type {HAxis}
     * @memberof HOptions
     */
    xAxis?: HAxis;
    /**
     * 
     * @type {Array<HSeries>}
     * @memberof HOptions
     */
    series: Array<HSeries>;
    /**
     * 
     * @type {HNavigator}
     * @memberof HOptions
     */
    navigator?: HNavigator;
    /**
     * 
     * @type {HScrollbar}
     * @memberof HOptions
     */
    scrollbar?: HScrollbar;
    /**
     * 
     * @type {HLegend}
     * @memberof HOptions
     */
    legend?: HLegend;
    /**
     * 
     * @type {Array<HAnnotation>}
     * @memberof HOptions
     */
    annotations: Array<HAnnotation>;
}

export function HOptionsFromJSON(json: any): HOptions {
    return HOptionsFromJSONTyped(json, false);
}

export function HOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): HOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, 'title') ? undefined : HTitleFromJSON(json['title']),
        'rangeSelector': !exists(json, 'rangeSelector') ? undefined : HRangeSelectorFromJSON(json['rangeSelector']),
        'chart': !exists(json, 'chart') ? undefined : HChartFromJSON(json['chart']),
        'yAxis': ((json['YAxis'] as Array<any>).map(HAxisFromJSON)),
        'xAxis': !exists(json, 'XAxis') ? undefined : HAxisFromJSON(json['XAxis']),
        'series': ((json['series'] as Array<any>).map(HSeriesFromJSON)),
        'navigator': !exists(json, 'navigator') ? undefined : HNavigatorFromJSON(json['navigator']),
        'scrollbar': !exists(json, 'scrollbar') ? undefined : HScrollbarFromJSON(json['scrollbar']),
        'legend': !exists(json, 'legend') ? undefined : HLegendFromJSON(json['legend']),
        'annotations': ((json['annotations'] as Array<any>).map(HAnnotationFromJSON)),
    };
}

export function HOptionsToJSON(value?: HOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': HTitleToJSON(value.title),
        'rangeSelector': HRangeSelectorToJSON(value.rangeSelector),
        'chart': HChartToJSON(value.chart),
        'YAxis': ((value.yAxis as Array<any>).map(HAxisToJSON)),
        'XAxis': HAxisToJSON(value.xAxis),
        'series': ((value.series as Array<any>).map(HSeriesToJSON)),
        'navigator': HNavigatorToJSON(value.navigator),
        'scrollbar': HScrollbarToJSON(value.scrollbar),
        'legend': HLegendToJSON(value.legend),
        'annotations': ((value.annotations as Array<any>).map(HAnnotationToJSON)),
    };
}



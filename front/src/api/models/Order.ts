/* tslint:disable */
/* eslint-disable */
/**
 * demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrderOrderType,
    OrderOrderTypeFromJSON,
    OrderOrderTypeFromJSONTyped,
    OrderOrderTypeToJSON,
    OrderSide,
    OrderSideFromJSON,
    OrderSideFromJSONTyped,
    OrderSideToJSON,
    OrderStatus,
    OrderStatusFromJSON,
    OrderStatusFromJSONTyped,
    OrderStatusToJSON,
} from './';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    portfolio: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderId: string;
    /**
     * 
     * @type {OrderSide}
     * @memberof Order
     */
    side: OrderSide;
    /**
     * 
     * @type {OrderOrderType}
     * @memberof Order
     */
    orderType: OrderOrderType;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    status: OrderStatus;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    qty: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    placeTime: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    updateTime: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    symbol: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id?: number | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Order
     */
    discreteTags?: { [key: string]: string; } | null;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Order
     */
    continuousTags?: { [key: string]: number; } | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    tradeId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    price?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    executionPrice?: number | null;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'portfolio': json['portfolio'],
        'orderId': json['orderId'],
        'side': OrderSideFromJSON(json['side']),
        'orderType': OrderOrderTypeFromJSON(json['orderType']),
        'status': OrderStatusFromJSON(json['status']),
        'qty': json['qty'],
        'placeTime': !exists(json, 'placeTime') ? undefined : json['placeTime'],
        'updateTime': !exists(json, 'updateTime') ? undefined : json['updateTime'],
        'symbol': json['symbol'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'discreteTags': !exists(json, 'discreteTags') ? undefined : json['discreteTags'],
        'continuousTags': !exists(json, 'continuousTags') ? undefined : json['continuousTags'],
        'tradeId': !exists(json, 'tradeId') ? undefined : json['tradeId'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'executionPrice': !exists(json, 'executionPrice') ? undefined : json['executionPrice'],
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'portfolio': value.portfolio,
        'orderId': value.orderId,
        'side': OrderSideToJSON(value.side),
        'orderType': OrderOrderTypeToJSON(value.orderType),
        'status': OrderStatusToJSON(value.status),
        'qty': value.qty,
        'placeTime': value.placeTime,
        'updateTime': value.updateTime,
        'symbol': value.symbol,
        'id': value.id,
        'discreteTags': value.discreteTags,
        'continuousTags': value.continuousTags,
        'tradeId': value.tradeId,
        'price': value.price,
        'executionPrice': value.executionPrice,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    HPoint,
    HPointFromJSON,
    HPointFromJSONTyped,
    HPointToJSON,
    HStyle,
    HStyleFromJSON,
    HStyleFromJSONTyped,
    HStyleToJSON,
} from './';

/**
 * 
 * @export
 * @interface HLabel
 */
export interface HLabel {
    /**
     * 
     * @type {HPoint}
     * @memberof HLabel
     */
    point?: HPoint;
    /**
     * 
     * @type {boolean}
     * @memberof HLabel
     */
    drawOnTop?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof HLabel
     */
    backgroundColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HLabel
     */
    borderColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HLabel
     */
    verticalAlign?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HLabel
     */
    distance?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HLabel
     */
    text?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HLabel
     */
    shape?: string | null;
    /**
     * 
     * @type {HStyle}
     * @memberof HLabel
     */
    style?: HStyle;
    /**
     * 
     * @type {boolean}
     * @memberof HLabel
     */
    allowOverlap?: boolean | null;
}

export function HLabelFromJSON(json: any): HLabel {
    return HLabelFromJSONTyped(json, false);
}

export function HLabelFromJSONTyped(json: any, ignoreDiscriminator: boolean): HLabel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'point': !exists(json, 'point') ? undefined : HPointFromJSON(json['point']),
        'drawOnTop': !exists(json, 'drawOnTop') ? undefined : json['drawOnTop'],
        'backgroundColor': !exists(json, 'backgroundColor') ? undefined : json['backgroundColor'],
        'borderColor': !exists(json, 'borderColor') ? undefined : json['borderColor'],
        'verticalAlign': !exists(json, 'verticalAlign') ? undefined : json['verticalAlign'],
        'distance': !exists(json, 'distance') ? undefined : json['distance'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'shape': !exists(json, 'shape') ? undefined : json['shape'],
        'style': !exists(json, 'style') ? undefined : HStyleFromJSON(json['style']),
        'allowOverlap': !exists(json, 'allowOverlap') ? undefined : json['allowOverlap'],
    };
}

export function HLabelToJSON(value?: HLabel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'point': HPointToJSON(value.point),
        'drawOnTop': value.drawOnTop,
        'backgroundColor': value.backgroundColor,
        'borderColor': value.borderColor,
        'verticalAlign': value.verticalAlign,
        'distance': value.distance,
        'text': value.text,
        'shape': value.shape,
        'style': HStyleToJSON(value.style),
        'allowOverlap': value.allowOverlap,
    };
}



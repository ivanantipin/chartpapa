/* tslint:disable */
/* eslint-disable */
/**
 * demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Candle,
    CandleFromJSON,
    CandleToJSON,
    Instrument,
    InstrumentFromJSON,
    InstrumentToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    Portfolio,
    PortfolioFromJSON,
    PortfolioToJSON,
    PortfolioInstrumentsMeta,
    PortfolioInstrumentsMetaFromJSON,
    PortfolioInstrumentsMetaToJSON,
    TagsMetaSummary,
    TagsMetaSummaryFromJSON,
    TagsMetaSummaryToJSON,
    Trade,
    TradeFromJSON,
    TradeToJSON,
} from '../models';

export interface CandlesReadRequest {
    symbol: string;
    timeframe: string;
    fromTs: number;
    toTs: number;
}

export interface DisplayTradeRequest {
    tradeId: string;
}

export interface PortfoliosAvailableInstrumentsMetaListRequest {
    portfolio: string;
}

export interface PortfoliosAvailableTagsListRequest {
    portfolio: string;
}

export interface PortfoliosOrdersListRequest {
    portfolio: string;
}

export interface PortfoliosTradesListRequest {
    portfolio: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async candlesReadRaw(requestParameters: CandlesReadRequest): Promise<runtime.ApiResponse<Array<Candle>>> {
        if (requestParameters.symbol === null || requestParameters.symbol === undefined) {
            throw new runtime.RequiredError('symbol','Required parameter requestParameters.symbol was null or undefined when calling candlesRead.');
        }

        if (requestParameters.timeframe === null || requestParameters.timeframe === undefined) {
            throw new runtime.RequiredError('timeframe','Required parameter requestParameters.timeframe was null or undefined when calling candlesRead.');
        }

        if (requestParameters.fromTs === null || requestParameters.fromTs === undefined) {
            throw new runtime.RequiredError('fromTs','Required parameter requestParameters.fromTs was null or undefined when calling candlesRead.');
        }

        if (requestParameters.toTs === null || requestParameters.toTs === undefined) {
            throw new runtime.RequiredError('toTs','Required parameter requestParameters.toTs was null or undefined when calling candlesRead.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromTs !== undefined) {
            queryParameters['fromTs'] = requestParameters.fromTs;
        }

        if (requestParameters.toTs !== undefined) {
            queryParameters['toTs'] = requestParameters.toTs;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/candles/{timeframe}/{symbol}/`.replace(`{${"symbol"}}`, encodeURIComponent(String(requestParameters.symbol))).replace(`{${"timeframe"}}`, encodeURIComponent(String(requestParameters.timeframe))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CandleFromJSON));
    }

    /**
     */
    async candlesRead(requestParameters: CandlesReadRequest): Promise<Array<Candle>> {
        const response = await this.candlesReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async displayTradeRaw(requestParameters: DisplayTradeRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.tradeId === null || requestParameters.tradeId === undefined) {
            throw new runtime.RequiredError('tradeId','Required parameter requestParameters.tradeId was null or undefined when calling displayTrade.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/portfolios/describe/{tradeId}`.replace(`{${"tradeId"}}`, encodeURIComponent(String(requestParameters.tradeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async displayTrade(requestParameters: DisplayTradeRequest): Promise<string> {
        const response = await this.displayTradeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async instrumentsListRaw(): Promise<runtime.ApiResponse<Array<Instrument>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/instruments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstrumentFromJSON));
    }

    /**
     */
    async instrumentsList(): Promise<Array<Instrument>> {
        const response = await this.instrumentsListRaw();
        return await response.value();
    }

    /**
     */
    async portfoliosAvailableInstrumentsMetaListRaw(requestParameters: PortfoliosAvailableInstrumentsMetaListRequest): Promise<runtime.ApiResponse<PortfolioInstrumentsMeta>> {
        if (requestParameters.portfolio === null || requestParameters.portfolio === undefined) {
            throw new runtime.RequiredError('portfolio','Required parameter requestParameters.portfolio was null or undefined when calling portfoliosAvailableInstrumentsMetaList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/portfolios/{portfolio}/available-instruments-meta/`.replace(`{${"portfolio"}}`, encodeURIComponent(String(requestParameters.portfolio))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioInstrumentsMetaFromJSON(jsonValue));
    }

    /**
     */
    async portfoliosAvailableInstrumentsMetaList(requestParameters: PortfoliosAvailableInstrumentsMetaListRequest): Promise<PortfolioInstrumentsMeta> {
        const response = await this.portfoliosAvailableInstrumentsMetaListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async portfoliosAvailableTagsListRaw(requestParameters: PortfoliosAvailableTagsListRequest): Promise<runtime.ApiResponse<TagsMetaSummary>> {
        if (requestParameters.portfolio === null || requestParameters.portfolio === undefined) {
            throw new runtime.RequiredError('portfolio','Required parameter requestParameters.portfolio was null or undefined when calling portfoliosAvailableTagsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/portfolios/{portfolio}/available-tags/`.replace(`{${"portfolio"}}`, encodeURIComponent(String(requestParameters.portfolio))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagsMetaSummaryFromJSON(jsonValue));
    }

    /**
     */
    async portfoliosAvailableTagsList(requestParameters: PortfoliosAvailableTagsListRequest): Promise<TagsMetaSummary> {
        const response = await this.portfoliosAvailableTagsListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async portfoliosListRaw(): Promise<runtime.ApiResponse<Array<Portfolio>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/portfolios/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PortfolioFromJSON));
    }

    /**
     */
    async portfoliosList(): Promise<Array<Portfolio>> {
        const response = await this.portfoliosListRaw();
        return await response.value();
    }

    /**
     */
    async portfoliosOrdersListRaw(requestParameters: PortfoliosOrdersListRequest): Promise<runtime.ApiResponse<Array<Order>>> {
        if (requestParameters.portfolio === null || requestParameters.portfolio === undefined) {
            throw new runtime.RequiredError('portfolio','Required parameter requestParameters.portfolio was null or undefined when calling portfoliosOrdersList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/portfolios/{portfolio}/orders/`.replace(`{${"portfolio"}}`, encodeURIComponent(String(requestParameters.portfolio))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     */
    async portfoliosOrdersList(requestParameters: PortfoliosOrdersListRequest): Promise<Array<Order>> {
        const response = await this.portfoliosOrdersListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async portfoliosTradesListRaw(requestParameters: PortfoliosTradesListRequest): Promise<runtime.ApiResponse<Array<Trade>>> {
        if (requestParameters.portfolio === null || requestParameters.portfolio === undefined) {
            throw new runtime.RequiredError('portfolio','Required parameter requestParameters.portfolio was null or undefined when calling portfoliosTradesList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/portfolios/{portfolio}/trades/`.replace(`{${"portfolio"}}`, encodeURIComponent(String(requestParameters.portfolio))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeFromJSON));
    }

    /**
     */
    async portfoliosTradesList(requestParameters: PortfoliosTradesListRequest): Promise<Array<Trade>> {
        const response = await this.portfoliosTradesListRaw(requestParameters);
        return await response.value();
    }

}

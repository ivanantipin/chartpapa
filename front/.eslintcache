[{"/home/ivan/projects/chartpapa/front/src/index.tsx":"1","/home/ivan/projects/chartpapa/front/src/serviceWorker.js":"2","/home/ivan/projects/chartpapa/front/src/App.tsx":"3","/home/ivan/projects/chartpapa/front/src/store.ts":"4","/home/ivan/projects/chartpapa/front/src/base.tsx":"5","/home/ivan/projects/chartpapa/front/src/reducers/reducers.ts":"6","/home/ivan/projects/chartpapa/front/src/actions/actions.ts":"7","/home/ivan/projects/chartpapa/front/src/services/api/services.ts":"8","/home/ivan/projects/chartpapa/front/src/components/sider/SiderMenu.tsx":"9","/home/ivan/projects/chartpapa/front/src/components/header/Header.tsx":"10","/home/ivan/projects/chartpapa/front/src/pages/by-symbol/BySymbolPage.tsx":"11","/home/ivan/projects/chartpapa/front/src/pages/total/TotalPage.tsx":"12","/home/ivan/projects/chartpapa/front/src/pages/aggregation/AggregationPage.tsx":"13","/home/ivan/projects/chartpapa/front/src/services/localStorage.ts":"14","/home/ivan/projects/chartpapa/front/src/services/tradeUtils.ts":"15","/home/ivan/projects/chartpapa/front/src/components/equity/EquityPanel.tsx":"16","/home/ivan/projects/chartpapa/front/src/components/equity/StatsPanel.tsx":"17","/home/ivan/projects/chartpapa/front/src/components/factors/FactorsPanel.tsx":"18","/home/ivan/projects/chartpapa/front/src/components/factors/FilterComp.tsx":"19","/home/ivan/projects/chartpapa/front/src/components/tables/ByDateResults.tsx":"20","/home/ivan/projects/chartpapa/front/src/components/tables/SymbolResults.tsx":"21","/home/ivan/projects/chartpapa/front/src/templates/aggregate-and-filter/AggregateAndFilterTemplate.tsx":"22","/home/ivan/projects/chartpapa/front/src/api/index.ts":"23","/home/ivan/projects/chartpapa/front/src/api/apis/index.ts":"24","/home/ivan/projects/chartpapa/front/src/services/aggregationUtils.ts":"25","/home/ivan/projects/chartpapa/front/src/components/tables/utils.tsx":"26","/home/ivan/projects/chartpapa/front/src/components/factors/FactorTab.tsx":"27","/home/ivan/projects/chartpapa/front/src/components/factors/FlatFactorsPage.tsx":"28","/home/ivan/projects/chartpapa/front/src/components/candlestick/CandlestickHigh.tsx":"29","/home/ivan/projects/chartpapa/front/src/components/perfromance/StatWidget.tsx":"30","/home/ivan/projects/chartpapa/front/src/components/forms/AggregationForm.tsx":"31","/home/ivan/projects/chartpapa/front/src/components/tables/AggregationTable.tsx":"32","/home/ivan/projects/chartpapa/front/src/components/equity/DisplaySettingsComp.tsx":"33","/home/ivan/projects/chartpapa/front/src/components/filter-view/FilterView.tsx":"34","/home/ivan/projects/chartpapa/front/src/api/runtime.ts":"35","/home/ivan/projects/chartpapa/front/src/api/apis/DefaultApi.ts":"36","/home/ivan/projects/chartpapa/front/src/services/quantizationUtils.ts":"37","/home/ivan/projects/chartpapa/front/src/components/factors/PieWidget.tsx":"38","/home/ivan/projects/chartpapa/front/src/components/factors/CategoryFactorWidget.tsx":"39","/home/ivan/projects/chartpapa/front/src/components/tables/TradesAndOrders.tsx":"40","/home/ivan/projects/chartpapa/front/src/api/models/index.ts":"41","/home/ivan/projects/chartpapa/front/src/api/models/Trade.ts":"42","/home/ivan/projects/chartpapa/front/src/api/models/TagsMetaSummary.ts":"43","/home/ivan/projects/chartpapa/front/src/api/models/Side.ts":"44","/home/ivan/projects/chartpapa/front/src/components/tables/TradesTable.tsx":"45","/home/ivan/projects/chartpapa/front/src/components/tables/OrdersTable.tsx":"46","/home/ivan/projects/chartpapa/front/src/api/models/PortfolioInstrumentsMeta.ts":"47","/home/ivan/projects/chartpapa/front/src/api/models/Portfolio.ts":"48","/home/ivan/projects/chartpapa/front/src/api/models/OrderStatus.ts":"49","/home/ivan/projects/chartpapa/front/src/api/models/Instrument.ts":"50","/home/ivan/projects/chartpapa/front/src/api/models/OrderOrderType.ts":"51","/home/ivan/projects/chartpapa/front/src/api/models/DiscreteMeta.ts":"52","/home/ivan/projects/chartpapa/front/src/api/models/Order.ts":"53","/home/ivan/projects/chartpapa/front/src/api/models/ContinuousMeta.ts":"54","/home/ivan/projects/chartpapa/front/src/api/models/Candle.ts":"55","/home/ivan/projects/chartpapa/front/src/components/candlestick/DisplayTrade.tsx":"56","/home/ivan/projects/chartpapa/front/src/components/factors/FlatFactorsComp.tsx":"57","/home/ivan/projects/chartpapa/front/src/components/factors/ContinuosSlider.tsx":"58","/home/ivan/projects/chartpapa/front/src/components/factors/DiscreteSlider.tsx":"59"},{"size":463,"mtime":1591244025696,"results":"60","hashOfConfig":"61"},{"size":5086,"mtime":1590317657594,"results":"62","hashOfConfig":"61"},{"size":443,"mtime":1590470834444,"results":"63","hashOfConfig":"61"},{"size":123,"mtime":1592862143073,"results":"64","hashOfConfig":"61"},{"size":1857,"mtime":1594923953422,"results":"65","hashOfConfig":"61"},{"size":3445,"mtime":1593491777551,"results":"66","hashOfConfig":"61"},{"size":1618,"mtime":1593491777551,"results":"67","hashOfConfig":"61"},{"size":356,"mtime":1610748836349,"results":"68","hashOfConfig":"61"},{"size":1596,"mtime":1610748286154,"results":"69","hashOfConfig":"61"},{"size":4296,"mtime":1610824445567,"results":"70","hashOfConfig":"61"},{"size":1010,"mtime":1610822035996,"results":"71","hashOfConfig":"61"},{"size":3457,"mtime":1612709153375,"results":"72","hashOfConfig":"61"},{"size":233,"mtime":1592885384160,"results":"73","hashOfConfig":"61"},{"size":1821,"mtime":1610738699048,"results":"74","hashOfConfig":"61"},{"size":8705,"mtime":1610743774172,"results":"75","hashOfConfig":"61"},{"size":1893,"mtime":1612113927509,"results":"76","hashOfConfig":"61"},{"size":427,"mtime":1594930600814,"results":"77","hashOfConfig":"61"},{"size":638,"mtime":1612707102200,"results":"78","hashOfConfig":"61"},{"size":2309,"mtime":1612707230252,"results":"79","hashOfConfig":"61"},{"size":1033,"mtime":1594927211569,"results":"80","hashOfConfig":"61"},{"size":5746,"mtime":1594927211553,"results":"81","hashOfConfig":"61"},{"size":2325,"mtime":1598379742851,"results":"82","hashOfConfig":"61"},{"size":77,"mtime":1610882021679,"results":"83","hashOfConfig":"61"},{"size":30,"mtime":1610882021683,"results":"84","hashOfConfig":"61"},{"size":5458,"mtime":1610824148588,"results":"85","hashOfConfig":"61"},{"size":1350,"mtime":1593152804818,"results":"86","hashOfConfig":"61"},{"size":1471,"mtime":1598425364188,"results":"87","hashOfConfig":"61"},{"size":1141,"mtime":1612707145880,"results":"88","hashOfConfig":"61"},{"size":3840,"mtime":1610738136163,"results":"89","hashOfConfig":"61"},{"size":939,"mtime":1591848827634,"results":"90","hashOfConfig":"61"},{"size":7673,"mtime":1593629840639,"results":"91","hashOfConfig":"61"},{"size":3896,"mtime":1594929216194,"results":"92","hashOfConfig":"61"},{"size":806,"mtime":1594923706697,"results":"93","hashOfConfig":"61"},{"size":1655,"mtime":1612113875501,"results":"94","hashOfConfig":"61"},{"size":10005,"mtime":1610882063587,"results":"95","hashOfConfig":"61"},{"size":11039,"mtime":1610882021679,"results":"96","hashOfConfig":"61"},{"size":3252,"mtime":1593629840667,"results":"97","hashOfConfig":"61"},{"size":1900,"mtime":1595482747624,"results":"98","hashOfConfig":"61"},{"size":2784,"mtime":1595482903568,"results":"99","hashOfConfig":"61"},{"size":648,"mtime":1611256759828,"results":"100","hashOfConfig":"61"},{"size":369,"mtime":1610882021687,"results":"101","hashOfConfig":"61"},{"size":3164,"mtime":1610882021611,"results":"102","hashOfConfig":"61"},{"size":1963,"mtime":1610882021603,"results":"103","hashOfConfig":"61"},{"size":790,"mtime":1610882021599,"results":"104","hashOfConfig":"61"},{"size":1414,"mtime":1593236193958,"results":"105","hashOfConfig":"61"},{"size":1757,"mtime":1593152804818,"results":"106","hashOfConfig":"61"},{"size":2062,"mtime":1610882021595,"results":"107","hashOfConfig":"61"},{"size":1415,"mtime":1610882021587,"results":"108","hashOfConfig":"61"},{"size":935,"mtime":1610882021579,"results":"109","hashOfConfig":"61"},{"size":2062,"mtime":1610882021563,"results":"110","hashOfConfig":"61"},{"size":1057,"mtime":1610882021575,"results":"111","hashOfConfig":"61"},{"size":1393,"mtime":1610882021555,"results":"112","hashOfConfig":"61"},{"size":4010,"mtime":1610882021571,"results":"113","hashOfConfig":"61"},{"size":1535,"mtime":1610882021547,"results":"114","hashOfConfig":"61"},{"size":1917,"mtime":1610882021539,"results":"115","hashOfConfig":"61"},{"size":819,"mtime":1611256451158,"results":"116","hashOfConfig":"61"},{"size":4538,"mtime":1612707172520,"results":"117","hashOfConfig":"61"},{"size":1084,"mtime":1612707230256,"results":"118","hashOfConfig":"61"},{"size":1595,"mtime":1612707230248,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"19hvjn0",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"122"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"122"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"122"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"122"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"122"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"193","usedDeprecatedRules":"122"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"122"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"122"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"122"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ivan/projects/chartpapa/front/src/index.tsx",[],["257","258"],"/home/ivan/projects/chartpapa/front/src/serviceWorker.js",[],["259","260"],"/home/ivan/projects/chartpapa/front/src/App.tsx",[],"/home/ivan/projects/chartpapa/front/src/store.ts",[],"/home/ivan/projects/chartpapa/front/src/base.tsx",["261"],"import React, {useEffect} from 'react';\nimport './App.css';\nimport {Layout} from 'antd';\nimport 'antd/dist/antd.css';\nimport {SiderMenu} from \"./components/sider/SiderMenu\";\nimport {Header} from \"./components/header/Header\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {TotalPage} from \"./pages/total/TotalPage\";\nimport {useDispatch} from \"react-redux\";\nimport {setPortfolios} from \"./actions/actions\";\nimport {portfoliosApi} from \"./services/api/services\";\nimport {BySymbolPage} from \"./pages/by-symbol/BySymbolPage\";\nimport {AggregationPage} from \"./pages/aggregation/AggregationPage\";\n\nconst {Content} = Layout;\n\nexport const Base = (props: any) => {\n\n    let dispatch = useDispatch();\n\n    useEffect(() => {\n        portfoliosApi.portfoliosList().then(lst => {\n            dispatch(setPortfolios(lst))\n        })\n    }, [])\n\n\n    return (\n        <Router>\n            <Switch>\n                <Layout style={{height: '2000px'}}>\n                    <SiderMenu/>\n                    <Layout className=\"site-layout\">\n                        <Header/>\n                        <Content style={{padding: '0 10px', height: '100%'}}>\n                            <div className=\"site-layout-content\">\n                                <Route path='/total'>\n                                    <TotalPage/>\n                                </Route>\n                                <Route path='/by-symbol'>\n                                    <BySymbolPage/>\n                                </Route>\n                                <Route path='/aggregation'>\n                                    <AggregationPage/>\n                                </Route>\n                            </div>\n                        </Content>\n                    </Layout>\n                </Layout>\n            </Switch>\n        </Router>\n    )\n}","/home/ivan/projects/chartpapa/front/src/reducers/reducers.ts",["262"],"import {Instrument, Order, Portfolio, PortfolioInstrumentsMeta, TagsMetaSummary, Trade} from \"../api/models\";\n\nlet _ = require('lodash');\n\nexport interface InstrumentMap {\n    [key: string]: Instrument\n}\n\nexport interface IMainState {\n    portfolioID?: string,\n    dailyQuotes: Array<any>,\n    intradayQuotes: Array<any>,\n    availablePortfolios: Array<Portfolio>,\n    trades: Array<Trade>,\n    orders: Array<Order>,\n    availableTags?: TagsMetaSummary,\n    availableInstrumentsMeta?: PortfolioInstrumentsMeta,\n    loadStatus: LoadStatus\n    instrumentsMap?: InstrumentMap\n}\n\nexport enum LoadStatusEnum {\n    Loading, Loaded, Error\n}\n\nexport interface LoadStatus {\n    [key: string]: LoadStatusEnum\n}\n\nexport const loadingLoadingState = {\n    instruments: LoadStatusEnum.Loading,\n    orders: LoadStatusEnum.Loading,\n    tags: LoadStatusEnum.Loading,\n    trades: LoadStatusEnum.Loading\n};\n\n\nconst initialState: IMainState = {\n    portfolioID: undefined,\n    dailyQuotes: [],\n    intradayQuotes: [],\n    availablePortfolios: [],\n    trades: [],\n    orders: [],\n    loadStatus: loadingLoadingState\n};\n\n\nexport const SET_PORTFOLIO_ID = 'SET_PORTFOLIO_ID';\nexport const SET_AVAILABLE_PORTFOLIOS = 'SET_AVAILABLE_PORTFOLIOS';\nexport const TRADES_LOADED = 'LOAD_TRADES';\nexport const SET_LOAD_STATUS = 'SET_LOAD_STATUS';\nexport const ORDERS_LOADED = 'ORDERS_LOADED';\n\nexport const DAILY_QUOTES_LOADED = 'DAILY_QUOTES_LOADED';\nexport const INTRADAY_QUOTES_LOADED = 'INTRADAY_QUOTES_LOADED';\nexport const SET_TAGS_AVAILABLE = 'SET_TAGS_AVAILABLE'\nexport const SET_AVAILABLE_INSTRUMENTS_META = 'SET_AVAILABLE_INSTRUMENTS_META'\nexport const INSTRUMENTS_MAP_LOADED = 'INSTRUMENTS_MAP_LOADED'\n\n\nexport const reducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case TRADES_LOADED:\n            const trd: Array<Trade> = action.payload\n            return {\n                ...state,\n                trades: trd.sort((t0, t1) => t0.openTime - t1.openTime),\n            };\n        case ORDERS_LOADED:\n            const ord: Array<Order> = action.payload\n            return {\n                ...state,\n                orders: ord.sort((t0, t1) => t0.placeTime - t1.placeTime),\n            };\n        case SET_AVAILABLE_PORTFOLIOS:\n            return {\n                ...state,\n                availablePortfolios: action.payload\n            };\n        case SET_LOAD_STATUS:\n            return {\n                ...state,\n                loadStatus: {...state.loadStatus, ...action.payload}\n            };\n\n        case SET_PORTFOLIO_ID:\n            return {\n                ...state,\n                portfolioID: action.payload\n            };\n        case DAILY_QUOTES_LOADED:\n            return {\n                ...state,\n                dailyQuotes: action.payload\n            };\n\n        case INTRADAY_QUOTES_LOADED:\n            return {\n                ...state,\n                intradayQuotes: action.payload\n            };\n        case SET_TAGS_AVAILABLE:\n            return {\n                ...state,\n                availableTags: action.payload\n            }\n        case SET_AVAILABLE_INSTRUMENTS_META:\n            return {\n                ...state,\n                availableInstrumentsMeta: action.payload\n            }\n        case INSTRUMENTS_MAP_LOADED:\n            return {\n                ...state,\n                instrumentsMap: action.payload\n            }\n        default:\n            return state\n    }\n};\n","/home/ivan/projects/chartpapa/front/src/actions/actions.ts",[],"/home/ivan/projects/chartpapa/front/src/services/api/services.ts",[],"/home/ivan/projects/chartpapa/front/src/components/sider/SiderMenu.tsx",["263"],"import React, {useState} from 'react'\nimport {useHistory} from \"react-router-dom\";\nimport {Layout, Menu} from 'antd';\nimport 'antd/dist/antd.css';\nimport {AreaChartOutlined, DeploymentUnitOutlined} from '@ant-design/icons';\nimport {MenuInfo, SelectInfo} from \"rc-menu/lib/interface\";\n\n\nconst {Sider} = Layout;\n\n\nexport const SiderMenu = (props: any) => {\n\n    const [collapsed, setCollapsed] = useState(false)\n    const [selectedKey, setSelectedKey] = useState(\"/total\")\n\n    const history = useHistory();\n\n    return (\n        <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n            <Menu theme=\"dark\" mode=\"inline\"\n                  defaultSelectedKeys={['/total']}\n                  selectedKeys={[selectedKey]}\n                  onClick={(info: MenuInfo) => {\n                      history.push(info.key as string)\n                      setSelectedKey(info.key as string)\n                  }}\n            >\n                <Menu.Item key=\"/my-portfolios\" icon={<AreaChartOutlined/>}>\n                    Portfolios\n                </Menu.Item>\n                <Menu.Item key=\"/total\" icon={<AreaChartOutlined/>}>\n                    Total\n                </Menu.Item>\n                <Menu.Item key=\"/by-symbol\" icon={<AreaChartOutlined/>}>\n                    By Symbol\n                </Menu.Item>\n                <Menu.Item key=\"/aggregation\" icon={<AreaChartOutlined/>}>\n                    Aggregation\n                </Menu.Item>\n                <Menu.Item key=\"6\" icon={<DeploymentUnitOutlined/>}>Compare</Menu.Item>\n            </Menu>\n        </Sider>\n    )\n}","/home/ivan/projects/chartpapa/front/src/components/header/Header.tsx",["264","265","266"],"import React, {useEffect} from \"react\";\nimport {Button, PageHeader, Select, Spin} from \"antd\";\nimport {useDispatch} from \"react-redux\"\nimport {\n    setAvailableInstrumentsMeta,\n    setAvailableTags,\n    setInstruments,\n    setLoadStatus,\n    setOrders,\n    setPortfolioID,\n    setTrades\n} from \"../../actions/actions\"\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState, loadingLoadingState, LoadStatus, LoadStatusEnum} from \"../../reducers/reducers\";\nimport {instrumentsApi, portfoliosApi} from \"../../services/api/services\";\nimport {\n    getLocalStoredInstruments,\n    setLocalStoredInstruments,\n    setStoredPortfolioAvailableTags,\n    setStoredPortfolioInstrumentsMeta\n} from \"../../services/localStorage\";\n\nconst {Option} = Select;\n\nexport const portfolioStorage = window.localStorage;\n\n\nconst StatusComp = (props: { status: LoadStatus }) => {\n    let values = Object.values(props.status);\n    if (values.some(it => it === LoadStatusEnum.Error)) {\n        return <div key=\"error\">Error load</div>\n    }\n    if (values.some(it => it === LoadStatusEnum.Loading)) {\n        return <Spin key=\"wait\"/>\n    }\n    return <div key=\"loaded\">Loaded</div>\n};\n\n\nexport const Header = (props: any) => {\n\n    const {availablePortfolios, portfolioID, loadStatus} = useMappedState((state: IMainState) => state)\n\n\n    let dispatch = useDispatch();\n\n    const onPortfolioSelected = (value: string) => {\n        if (value) {\n            portfolioStorage.setItem(\"portfolio\", value);\n            dispatch(setPortfolioID(value));\n        }\n    };\n\n    useEffect(() => {\n        let storedPortfolio = portfolioStorage.getItem(\"portfolio\");\n        if (!portfolioID && storedPortfolio) {\n            onPortfolioSelected(storedPortfolio)\n        }\n\n        if (portfolioID) {\n            dispatch(setLoadStatus(loadingLoadingState))\n\n            portfoliosApi.portfoliosTradesList({portfolio: portfolioID}).then(trd => {\n                dispatch(setTrades(trd))\n                dispatch(setLoadStatus({trades: LoadStatusEnum.Loaded}))\n            });\n\n\n            portfoliosApi.portfoliosOrdersList({portfolio: portfolioID}).then(orders => {\n                dispatch(setOrders(orders))\n                dispatch(setLoadStatus({orders: LoadStatusEnum.Loaded}))\n            });\n\n            const portfolio = portfolioID as string\n            portfoliosApi.portfoliosAvailableInstrumentsMetaList(\n                {portfolio}).then(meta => {\n                setStoredPortfolioInstrumentsMeta(portfolio, meta)\n                dispatch(setAvailableInstrumentsMeta(meta))\n                dispatch(setLoadStatus({instruments: LoadStatusEnum.Loaded}))\n            });\n            portfoliosApi.portfoliosAvailableTagsList({portfolio}).then(tags => {\n                setStoredPortfolioAvailableTags(portfolio, tags)\n                dispatch(setAvailableTags(tags))\n                dispatch(setLoadStatus({tags: LoadStatusEnum.Loaded}))\n            });\n        }\n    }, [portfolioID])\n\n    useEffect(() => {\n        dispatch(setInstruments(getLocalStoredInstruments()))\n        dispatch(setLoadStatus({instruments: LoadStatusEnum.Loaded}))\n        instrumentsApi.instrumentsList().then(instruments => {\n            setLocalStoredInstruments(instruments)\n            dispatch(setInstruments(instruments))\n            dispatch(setLoadStatus({instruments: LoadStatusEnum.Loaded}))\n        })\n    }, [])\n\n\n    let options = null;\n\n    if (availablePortfolios !== undefined) {\n        options = [];\n        availablePortfolios.map(p => {\n            options.push(<Option key={p.name} value={p.name}>{p.name}</Option>)\n        })\n    }\n\n    const title = portfolioID === undefined ? \"Please choose portfolio\" : `Results for portfolio ${portfolioID}`;\n\n    return (\n        <PageHeader\n            ghost={false}\n            onBack={() => window.history.back()}\n            title={title}\n            extra={[\n                <StatusComp  key={\"0\"} status={loadStatus}/>,\n                <Button key=\"1\">Manage Portfolios</Button>,\n                <Select key=\"2\" style={{width: 200}} defaultValue=\"\" value={portfolioID} onSelect={onPortfolioSelected}>\n                    <Option value=\"\">Please select portfolio...</Option>\n                    {options}\n                </Select>\n            ]}\n        />\n    )\n};\n\n","/home/ivan/projects/chartpapa/front/src/pages/by-symbol/BySymbolPage.tsx",[],"/home/ivan/projects/chartpapa/front/src/pages/total/TotalPage.tsx",["267"],"/home/ivan/projects/chartpapa/front/src/pages/aggregation/AggregationPage.tsx",[],"/home/ivan/projects/chartpapa/front/src/services/localStorage.ts",["268","269"],"import {Instrument, PortfolioInstrumentsMeta, TagsMetaSummary} from \"../api/models\";\n\nconst LAST_INSTRUMENTS_UPDATE = 'LAST_INSTRUMENTS_UPDATE'\nconst STORED_INSTRUMENTS = 'STORED_INSTRUMENTS'\nconst PORTFOLIO_UPDATE = 'PORTFOLIO_UPDATE'\nconst PORTFOLIO_AVAILABLE_TAGS = 'PORTFOLIO_AVAILABLE_TAGS'\nconst PORTFOLIO_INSTRUMENTS_META = 'PORTFOLIO_INSTRUMENTS_META'\n\n\nexport function getLocalStoredInstruments(): Array<Instrument> | undefined {\n    const stored = localStorage.getItem(STORED_INSTRUMENTS)\n    if (stored !== null && stored !== 'undefined') {\n        return JSON.parse(stored)\n    }\n    return\n}\n\nexport function setLocalStoredInstruments(map: Array<Instrument> | undefined) {\n    localStorage.setItem(STORED_INSTRUMENTS, JSON.stringify(map))\n}\n\nexport interface PortfolioUpdateInfo {\n    orders: number\n    trades: number\n}\n\nexport function getLastStoredPortfolioUpdate(portfolioID: string): PortfolioUpdateInfo | undefined {\n    const stored = localStorage.getItem(`${PORTFOLIO_UPDATE}_${portfolioID}`)\n    if (stored !== null && stored !== 'undefined') {\n        return JSON.parse(stored)\n    }\n    return\n}\n\nexport function getStoredPortfolioInstrumentsMeta(portfolioID: string): PortfolioInstrumentsMeta | undefined {\n    const stored = localStorage.getItem(`${PORTFOLIO_INSTRUMENTS_META}_${portfolioID}`)\n    if (stored !== null && stored !== 'undefined') {\n        return JSON.parse(stored)\n    }\n    return\n}\n\nexport function setStoredPortfolioInstrumentsMeta(portfolioID: string, meta: PortfolioInstrumentsMeta) {\n    localStorage.setItem(`${PORTFOLIO_INSTRUMENTS_META}_${portfolioID}`, JSON.stringify(meta))\n}\n\n\nexport function setStoredPortfolioAvailableTags(portfolioID: string, tags: TagsMetaSummary) {\n    localStorage.setItem(`${PORTFOLIO_INSTRUMENTS_META}_${portfolioID}`, JSON.stringify(tags))\n}","/home/ivan/projects/chartpapa/front/src/services/tradeUtils.ts",["270","271","272","273","274","275","276","277"],"import {all, create} from 'mathjs'\nimport moment from \"moment-timezone\";\nimport {QuantinizeFunction} from \"./quantizationUtils\";\nimport {Order, Side, Trade} from \"../api\"\n\nconst math = create(all, {})!\nlet _ = require('lodash');\n\n\nexport class EquityAndStats {\n    equity: Array<[number, number]>\n    title: string\n\n    constructor(equity: Array<[number, number]>, title: string) {\n        this.equity = equity;\n        this.title = title;\n    }\n}\n\nexport const groupBy = function <T>(trades: Array<T>, extr: (tr: T) => string): { [index: string]: Array<T> } {\n    return _.groupBy(trades, extr);\n};\n\n\nexport const calcStats = (trades: Array<Trade>): Stats => {\n    if (trades.length == 0) {\n        return {\n            avgPnl: 0,\n            avg_percent: 0,\n            biggest_trade: 0,\n            cnt: 0,\n            drawdown: 0,\n            drawdown_percent: 0,\n            lowest_trade: 0,\n            pf: 0,\n            pnl: 0,\n            recovery_factor: 0,\n            run_up: 0,\n            sharpe: 0,\n            sortino: 0,\n            std: 0,\n            median: 0,\n            holdHoursMean: 0\n        }\n    }\n\n    let run_up = 0\n    let max_drawdown = 1000_000_000\n    let max_drawdown_percent = 1000_000_000\n\n    let last_point = 0\n    let last_point_long = 0\n    let last_point_short = 0\n\n    let win_sum = 0\n    let loss_sum = 0\n    let biggest_trade = -1000_000_000\n    let lowest_trade = 1000_000_000\n\n    let pnls: Array<number> = trades.map(it => it.pnl);\n\n\n    pnls.forEach((pnl, idx) => {\n        lowest_trade = math.min!(lowest_trade, pnl)\n        biggest_trade = math.max!(biggest_trade, pnl)\n        if (pnl > 0) {\n            win_sum += pnl\n        } else {\n            loss_sum += pnl\n        }\n\n        if (trades[idx].side === Side.Buy) {\n            last_point_long += pnl\n        } else {\n            last_point_short += pnl\n        }\n\n        last_point += pnl\n\n        if (last_point > run_up) {\n            run_up = last_point\n        }\n\n        let drawdown = last_point - run_up\n\n        if (drawdown < max_drawdown) {\n            max_drawdown = drawdown\n\n            let percent_drawdown = run_up == 0 ? 0 : (last_point - run_up) * 100 / run_up\n\n            if (percent_drawdown < max_drawdown_percent) {\n                max_drawdown_percent = percent_drawdown\n            }\n        }\n    })\n\n    const mean_trade = trades.length > 0 ? (loss_sum + win_sum) / trades.length : 0\n\n    const std = math.std!(pnls, 'unbiased')\n\n    const median = math.median!(pnls)\n\n    let shape = mean_trade / std\n\n    return {\n        cnt: trades.length,\n        std: std,\n        pnl: win_sum + loss_sum,\n        run_up: run_up,\n        drawdown: max_drawdown,\n        drawdown_percent: max_drawdown_percent,\n        sharpe: shape,\n        pf: loss_sum == 0 ? 0 : math.abs!(win_sum / loss_sum),\n        sortino: 0,\n        avgPnl: mean_trade,\n        avg_percent: 0,\n        recovery_factor: 0,\n        biggest_trade: biggest_trade,\n        lowest_trade: lowest_trade,\n        median: median,\n        holdHoursMean: math.mean!(trades.map(it => (it.closeTime - it.openTime) / 1000 / 3600))\n    }\n}\n\nexport interface Stats {\n    cnt: number\n    std: number\n    pnl: number\n    run_up: number\n    drawdown: number\n    drawdown_percent: number\n    sharpe: number\n    pf: number\n    sortino: number\n    avgPnl: number\n    avg_percent: number\n    recovery_factor: number\n    biggest_trade: number\n    lowest_trade: number\n    median: number,\n    holdHoursMean: number\n}\n\nexport function calcEquity(trades: Array<Trade>, byIndex: boolean): Array<[number, number]> {\n    let currentPnl = 0\n    return trades.map((trd, idx) => {\n        currentPnl += trd.pnl\n        return [byIndex ? idx : trd.openTime, currentPnl]\n    });\n}\n\nexport function chunk<T>(arr: Array<T>, chunk: number): Array<Array<T>> {\n    var i, j;\n    const ret = []\n    for (i = 0, j = arr.length; i < j; i += chunk) {\n        ret.push(arr.slice(i, i + chunk))\n    }\n    return ret\n}\n\nfunction getGroupedOrdersInfoForDate(groupedOrders: { [key: string]: Array<Order> }, dt: string): groupedOrdersInfo {\n    let count: number = 0\n    let exposure: number = 0\n    const ordersArr = groupedOrders[dt]\n    if (ordersArr !== undefined) {\n        count = ordersArr.length\n        ordersArr.map(o => {\n            exposure += o.price! * o.qty\n        })\n    }\n\n    return {count, exposure}\n}\n\ninterface groupedOrdersInfo {\n    count: number\n    exposure: number\n}\n\nexport const groupByDate = function (trades: Array<Trade>, orders: Array<Order>): Array<DateStat> {\n\n    const atStart = (ts: number): string => {\n        return moment(ts).format('YYYY-MM-DD')\n    }\n\n    const groupedByCloseTime = _.groupBy(trades, (e: Trade) => {\n        return atStart(e.closeTime)\n    })\n\n    const groupedByOpenTime = _.groupBy(trades, (e: Trade) => {\n        return atStart(e.openTime)\n    })\n\n\n    const ordersByStatus = _.groupBy(orders, (e: Order) => {\n        return e.status.toLowerCase()\n    })\n    const allOrdersByPlaceDate = _.groupBy(orders, (e: Order) => {\n        return atStart(e.placeTime)\n    })\n\n    const filledOrdersByUpdateDate = _.groupBy(ordersByStatus.filled, (e: Order) => {\n        return atStart(e.updateTime)\n    })\n    const canceledOrdersByUpdateDate = _.groupBy(ordersByStatus.canceled, (e: Order) => {\n        return atStart(e.updateTime)\n    })\n\n    const closeDates = Object.keys(groupedByCloseTime)\n    const openDates = Object.keys(groupedByOpenTime)\n\n    const minDate = new Date(Math.min(...openDates.map(e => {\n        return new Date(e).getTime()\n    })))\n\n    const maxDate = new Date(Math.max(...closeDates.map(e => {\n        return new Date(e).getTime()\n    })))\n\n    let curDate = minDate\n\n    let totalOpenPositions: number = 0\n    let activeOrders: number = 0\n    let positionExposure: number = 0\n    let eodOrdersExposure: number = 0\n    let equity: number = 0\n\n    let byDate: Array<DateStat> = []\n\n    while (curDate <= maxDate) {\n        const dt: string = moment(curDate).format('YYYY-MM-DD')\n        let newOpenPositions: number = 0\n        let closedPnL: number = 0\n        let closedPositions: number = 0\n\n\n        const openPositionsArr = groupedByOpenTime[dt]\n        openPositionsArr?.forEach((p: Trade) => {\n            newOpenPositions += 1\n            positionExposure += p.openPrice * p.qty\n        })\n\n\n        const closedPositionsArr = groupedByCloseTime[dt]\n        closedPositionsArr?.forEach((p: Trade) => {\n            positionExposure -= Math.round(p.openPrice * p.qty)\n            closedPnL += p.pnl\n            closedPositions += 1\n        })\n\n\n        const executedOrdersInfo = getGroupedOrdersInfoForDate(filledOrdersByUpdateDate, dt)\n        const canceledOrdersInfo = getGroupedOrdersInfoForDate(canceledOrdersByUpdateDate, dt)\n        const placedOrdersInfo = getGroupedOrdersInfoForDate(allOrdersByPlaceDate, dt)\n\n        totalOpenPositions += newOpenPositions - closedPositions\n        equity += closedPnL\n        eodOrdersExposure += placedOrdersInfo.exposure - canceledOrdersInfo.exposure - executedOrdersInfo.exposure\n        activeOrders += placedOrdersInfo.count - canceledOrdersInfo.count - executedOrdersInfo.count\n\n        const date = new Date(dt)\n        byDate.push({\n            date,\n            equity,\n            totalOpenPositions,\n            newOpenPositions,\n            closedPositions,\n            positionExposure,\n            eodOrdersExposure,\n            totalExposure: eodOrdersExposure + positionExposure,\n            placedOrders: placedOrdersInfo.count,\n            activeOrders,\n            executedOrders: executedOrdersInfo.count,\n            canceledOrders: executedOrdersInfo.count,\n            closedPnL,\n        })\n\n        curDate.setDate(curDate.getDate() + 1);\n    }\n\n\n    return byDate\n};\n\n\nexport interface DateStat {\n    date: Date\n    equity: number\n    totalOpenPositions: number\n    newOpenPositions: number\n    closedPositions: number\n    positionExposure: number\n    eodOrdersExposure: number\n    totalExposure: number\n    placedOrders: number\n    activeOrders: number\n    executedOrders: number\n    canceledOrders: number\n    closedPnL: number\n}\n\nexport interface DiscreteAggregationTuple {\n    field: string\n    value: any\n}\n\nexport interface ContAggregationTuple extends DiscreteAggregationTuple{\n    func: QuantinizeFunction\n}\n\nexport interface AggregationConditions {\n    discreteTags: Array<DiscreteAggregationTuple>\n    continuousTags: Array<ContAggregationTuple>\n    discreteMeta: Array<DiscreteAggregationTuple>\n    continuousMeta: Array<ContAggregationTuple>\n    tradeCond: Array<DiscreteAggregationTuple>\n}\n\nexport interface AggregationResult extends Stats {\n    conditions: AggregationConditions\n}\n\n\n\n\n\n","/home/ivan/projects/chartpapa/front/src/components/equity/EquityPanel.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/equity/StatsPanel.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FactorsPanel.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FilterComp.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/tables/ByDateResults.tsx",["278"],"import React from 'react';\nimport 'antd/dist/antd.css';\n\nimport {Empty, Table} from 'antd';\nimport {DateStat, groupByDate} from \"../../services/tradeUtils\";\nimport {ColumnType} from \"antd/es/table\";\nimport {Order, Trade} from \"../../api/models\";\nimport {getRenderByValue} from \"./utils\";\n\n\nexport const DateStatTable = (props: { trades: Array<Trade>, orders: Array<Order> }) => {\n    const {trades, orders} = props;\n\n    const stat = groupByDate(trades, orders).filter(it => it.newOpenPositions !== 0 || it.closedPositions !== 0)\n\n    if (stat === undefined || stat.length === 0) {\n        return <Empty/>\n    }\n    const columns: ColumnType<DateStat>[] = []\n    Object.keys(stat[0]).map(p => {\n        columns.push({\n            title: p.charAt(0).toUpperCase() + p.slice(1),\n            dataIndex: p,\n            key: p,\n            render: getRenderByValue(p)\n        })\n    })\n\n    return <Table<DateStat>\n        columns={columns} dataSource={stat}\n        pagination={{pageSize: 150}} scroll={{y: 440}} size=\"small\"\n    />\n}\n\n\n","/home/ivan/projects/chartpapa/front/src/components/tables/SymbolResults.tsx",[],"/home/ivan/projects/chartpapa/front/src/templates/aggregate-and-filter/AggregateAndFilterTemplate.tsx",["279"],"import React, {Fragment, useEffect, useState} from \"react\";\nimport {Col, Row} from \"antd\"\nimport {AggregationTable} from \"../../components/tables/AggregationTable\";\nimport {FilterView} from \"../../components/filter-view/FilterView\";\nimport {AggregationForm} from \"../../components/forms/AggregationForm\";\nimport {AggregationResult,} from \"../../services/tradeUtils\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState} from \"../../reducers/reducers\";\nimport {Trade} from \"../../api/models\";\nimport {filterTradesByAggregationResult} from \"../../services/aggregationUtils\";\n\nexport const AggregateAndFilterTemplate = (props: {\n    withForm: boolean,\n    aggFunction?: (trades: Array<Trade>) => Array<AggregationResult>, hasCandlestick?: boolean\n}) => {\n\n    const {withForm, aggFunction, hasCandlestick} = props\n\n    const {trades, instrumentsMap} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const [filteredTrades, setFilteredTrades] = useState<Array<Trade>>([])\n    const [aggData, setAggData] = useState<Array<AggregationResult>>([])\n\n\n    const applyFilter = (aggregation: AggregationResult) => {\n        setFilteredTrades(filterTradesByAggregationResult(trades, aggregation, instrumentsMap))\n    }\n\n    const setAggDataFromForm = (results: Array<AggregationResult>) => {\n        setAggData(results)\n    }\n\n    const aggForm = withForm ? (\n        <Row><Col span={24}> <AggregationForm applyResults={setAggDataFromForm}/> </Col></Row>) : null\n    let initError = false;\n\n    useEffect(() => {\n        if (withForm) {\n            return\n        }\n        if (aggFunction === undefined) {\n            initError = true\n            return\n        }\n        const results = aggFunction(trades)\n        setAggDataFromForm(results)\n\n    }, [withForm, aggFunction, trades])\n\n    if (initError) {\n        return <h3>No agg function provided</h3>\n    }\n\n    return (\n        <Fragment>\n            {aggForm}\n            <Row>\n                <Col span={24}>\n                    <AggregationTable onClick={applyFilter} data={aggData}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={24}>\n                    <FilterView trades={filteredTrades} hasCandlestick={hasCandlestick}/>\n                </Col>\n            </Row>\n        </Fragment>\n    )\n}","/home/ivan/projects/chartpapa/front/src/api/index.ts",[],"/home/ivan/projects/chartpapa/front/src/api/apis/index.ts",[],"/home/ivan/projects/chartpapa/front/src/services/aggregationUtils.ts",[],"/home/ivan/projects/chartpapa/front/src/components/tables/utils.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FactorTab.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FlatFactorsPage.tsx",["280","281"],"/home/ivan/projects/chartpapa/front/src/components/candlestick/CandlestickHigh.tsx",["282","283","284"],"import React, {useEffect, useMemo, useState} from 'react';\n\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport {Trade, Side} from \"../../api/models\";\nimport {candlesApi} from \"../../services/api/services\";\n// @ts-ignore\nimport {CandlesApi} from \"../../api/apis\";\nimport {Configuration} from \"../../api\";\nimport {AnnotationsShapesOptions} from \"highcharts\";\nimport moment from \"moment-timezone\";\n\nrequire('highcharts/modules/annotations')(Highcharts)\n\nconst options = {\n    rangeSelector: {\n        selected: 1\n    },\n\n    title: {\n        text: \"AAPL Historical\"\n    },\n\n    yAxis: [\n        {\n            labels: {\n                align: \"right\",\n                x: -3\n            },\n            title: {\n                text: \"OHLC\"\n            },\n            height: \"100%\",\n            lineWidth: 2,\n            resize: {\n                enabled: true\n            }\n        }\n    ],\n\n    tooltip: {\n        split: true\n    },\n    chart: {\n        zoomType: 'x'\n    },\n    series: [\n        {\n            type: \"ohlc\",\n            name: \"AAPL\",\n            marker: {\n                enabled: false\n            }\n        }\n    ],\n    annotations: [] as Array<any>\n};\n\n\n\nexport const fetchTicker = (ticker: string, minTs: number, maxTs: number): Promise<Array<[number, number, number, number, number]>> => {\n    return candlesApi.candlesRead({symbol: ticker, timeframe: 'Min10', fromTs: minTs, toTs: maxTs}).then(it => {\n        return it.map(candle => {\n            return [candle.datetime, candle.open, candle.high, candle.low, candle.close]\n        })\n    })\n}\n\n\nconst makeShape = (trade: Trade): AnnotationsShapesOptions => {\n    return {\n        fill: 'none',\n        stroke: trade.side === Side.Sell ? 'red' : 'green',\n        strokeWidth: 3,\n        dashStyle: 'Dot',\n        type: 'path',\n        points: [{\n            x: trade.openTime,\n            y: trade.openPrice,\n            xAxis: 0,\n            yAxis: 0\n        },\n            {\n                x: trade.closeTime,\n                y: trade.closePrice,\n                xAxis: 0,\n                yAxis: 0\n            }],\n        markerEnd: 'arrow',\n        markerStart: 'circle'\n    }\n}\n\nexport const CandlestickHigh = (props: { trades: Array<Trade>, ticker: string }) => {\n\n    const [ohlc, setOhlc] = useState([] as Array<[number, number, number, number, number]>)\n\n    const [minTs, maxTs] = useMemo(() => {\n\n        let minTs = props.trades[0]?.openTime || 0\n        let maxTs = props.trades[props.trades.length - 1]?.closeTime || 0\n\n        props.trades.forEach((trd) => {\n            maxTs = Math.max(trd.closeTime, maxTs)\n            minTs = Math.min(trd.openTime, minTs)\n        })\n\n        return [minTs, maxTs]\n\n    }, [props.trades])\n\n\n    if (ohlc && ohlc.length > 0 && props.trades && props.trades.length > 0) {\n\n        console.log('first', moment(props.trades[0].openTime))\n        console.log('last', moment(props.trades[props.trades.length - 1].closeTime))\n\n        console.log('first oh', moment(ohlc[0][0]))\n        console.log('last oh', moment(ohlc[ohlc.length - 1][0]))\n    }\n\n\n    useEffect(() => {\n        console.log(\"requesting\", moment(minTs))\n        fetchTicker(props.ticker, minTs, maxTs).then(dt => {\n            setOhlc(dt)\n        })\n    }, [props.ticker]);\n\n    const ser = {\n        type: \"ohlc\",\n        name: props.ticker,\n        marker: {\n            enabled: false\n        },\n        data: ohlc\n    }\n\n    const opts = {\n        ...options,\n\n        title: {\n            text: props.ticker\n        },\n        series: [ser], annotations: [\n            {shapes: props.trades.map(trd => makeShape(trd))}\n        ]\n    };\n\n    return (\n        <HighchartsReact\n            highcharts={Highcharts}\n            constructorType={\"stockChart\"}\n            options={opts}/>\n    );\n}","/home/ivan/projects/chartpapa/front/src/components/perfromance/StatWidget.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/forms/AggregationForm.tsx",["285","286"],"import React, {Fragment, useEffect, useState} from \"react\";\nimport {AggregationResult} from \"../../services/tradeUtils\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState} from \"../../reducers/reducers\";\nimport {Button, Col, Divider, Empty, Form, InputNumber, Radio, Row, Select} from \"antd\"\nimport {DownOutlined, UpOutlined} from '@ant-design/icons'\nimport \"./style.css\"\nimport {aggregateTradesByParams} from \"../../services/aggregationUtils\";\n\nconst {Option} = Select;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n}\n\n\nexport const AggregationForm = (props: { applyResults: (results: Array<AggregationResult>) => void }) => {\n    const {availableTags, trades, availableInstrumentsMeta} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const {instrumentsMap} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const [tradesTagsOptions, setTradesTagsOptions] = useState<Array<any>>([])\n    const [tradesTagsOptionsCont, setTradesTagsOptionsCont] = useState<Array<any>>([])\n    const [instrumentsMetaOptions, setInstrumentsMetaOptions] = useState<Array<any>>([])\n    const [instrumentsMetaOptionsCont, setInstrumentsMetaOptionsCont] = useState<Array<any>>([])\n    const [collapse, setCollapse] = useState(false);\n    const [form] = Form.useForm();\n\n\n    useEffect(() => {\n        if (availableTags === undefined) {\n            setTradesTagsOptions([])\n            setTradesTagsOptionsCont([])\n            return\n        }\n        const newOptions = availableTags.discreteMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setTradesTagsOptions(newOptions)\n        const newOptionsCont = availableTags.continuousMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setTradesTagsOptionsCont(newOptionsCont)\n    }, [availableTags])\n\n\n    useEffect(() => {\n        if (availableInstrumentsMeta === undefined) {\n            setInstrumentsMetaOptions([])\n            return\n        }\n        const newOptions = availableInstrumentsMeta.discreteMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setInstrumentsMetaOptions(newOptions)\n\n        const newOptionsCont = availableInstrumentsMeta.continuousMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setInstrumentsMetaOptionsCont(newOptionsCont)\n    }, [availableInstrumentsMeta])\n\n    if (availableTags === undefined) {\n        return <Empty/>\n    }\n\n    const onFinish = (values: any) => {\n        setCollapse(true)\n        props.applyResults(aggregateTradesByParams(values, trades, instrumentsMap))\n    }\n    const inputFields = collapse ? null : (\n        <Fragment>\n            <Row gutter={24}>\n                <Col span={12} key='discrete_tags'>\n                    <Form.Item\n                        name=\"discrete_tags\"\n                        label=\"Tags\"\n                        rules={[{\n                            required: false,\n                            message: 'Select portfolio trades tag fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select tags..\">\n                            {tradesTagsOptions}\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span={12} key='continuous_tags'>\n                    <Form.Item\n                        name=\"continuous_tags\"\n                        label=\"Tags Continuous\"\n                        rules={[{\n                            required: false,\n                            message: 'Select portfolio trades tag fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select tags..\">\n                            {tradesTagsOptionsCont}\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row gutter={24}>\n                <Col span={12} key='discrete_metas'>\n                    <Form.Item\n                        name=\"discrete_metas\"\n                        label=\"Meta\"\n                        rules={[{\n                            required: false,\n                            message: 'Select fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select meta..\">\n                            {instrumentsMetaOptions}\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span={12} key='continuous_metas'>\n                    <Form.Item\n                        name=\"continuous_metas\"\n                        label=\"Meta Continuous\"\n                        rules={[{\n                            required: false,\n                            message: 'Select fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select meta..\">\n                            {instrumentsMetaOptionsCont}\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Divider/>\n                <Col span={12} key=\"agg_method\">\n                    <Form.Item name=\"agg_method\" label=\"Method\">\n                        <Radio.Group defaultValue=\"Quantile\">\n                            <Radio value=\"Quantile\">Quantile</Radio>\n                            <Radio value=\"Range\">Range</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                </Col>\n                <Col span={12}>\n                    <Form.Item label=\"Split groups\" name='split_groups'>\n                        <InputNumber min={5} max={50} step={5}/>\n                    </Form.Item>\n                </Col>\n            </Row>\n        </Fragment>\n    )\n    const buttons = !collapse ? (\n        <Row>\n            <Col span={24} style={{textAlign: 'right'}} key='agg_submit_group'>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Aggregate\n                </Button>\n                <Button style={{margin: '0 8px'}}\n                        onClick={() => {\n                            form.resetFields();\n                        }}>\n                    Clear\n                </Button>\n                <a style={{fontSize: 14}}\n                   onClick={() => {\n                       setCollapse(!collapse);\n                   }}>{!collapse ? <UpOutlined/> : <DownOutlined/>} Collapse\n                </a>\n            </Col>\n        </Row>) : (\n        <Row>\n            <Col span={24} style={{textAlign: 'right'}} key='agg_submit_group'>\n                <Button type=\"link\" style={{fontSize: 14}}\n                   onClick={() => {\n                       setCollapse(!collapse);\n                   }}>{!collapse ? <UpOutlined/> : <DownOutlined/>} Show form\n                </Button>\n            </Col>\n        </Row>\n    )\n    return (\n        <Form name=\"validate_other\"\n              className=\"ant-advanced-search-form\"\n              {...formItemLayout}\n              form={form}\n              initialValues={{\n                  [\"split_groups\"]: 10\n              }}\n              onFinish={onFinish}>\n            {inputFields}\n            {buttons}\n        </Form>\n    )\n}\n\n\n","/home/ivan/projects/chartpapa/front/src/components/tables/AggregationTable.tsx",["287","288","289","290","291"],"import React, {useEffect, useState} from \"react\"\nimport {AggregationResult, Stats} from \"../../services/tradeUtils\";\nimport {Collapse, Empty, Table} from \"antd\";\n\nimport {ColumnsType} from \"antd/es/table\";\nimport {getRenderByValue} from \"./utils\";\nimport 'antd/dist/antd.css';\nimport './style.css'\nimport {CompareFn} from \"antd/es/table/interface\";\n\nconst {Panel} = Collapse;\n\n\nconst getSorter = (fld: keyof Stats): { compare: CompareFn<Stats>, multiple: number } => {\n    return {\n        compare: (a: Stats, b: Stats) => a[fld] - b[fld],\n        multiple: 1\n    }\n};\n\n\nfunction constructTitle(selectedResult: any) {\n    let title = selectedResult?.conditions ? \"Results for conditions: \" : \"\"\n\n    Object.keys(selectedResult?.conditions || {}).map(e => {\n        for (const cond of selectedResult.conditions[e]) {\n            title += `${cond.field}=${cond.value} `\n        }\n    })\n    return title;\n}\n\nexport const AggregationTable = (props: { data: Array<AggregationResult>, onClick: (aggregation: AggregationResult) => void }) => {\n    const {data, onClick} = props\n    const [selectedResult, setSelectedResult] = useState<any>(undefined)\n    const [columns, setColumns] = useState<ColumnsType<AggregationResult>>()\n    const [formattedData, setFormattedData] = useState<Array<any>>([])\n    const [selectedIndex, setSelectedIndex] = useState<number>()\n\n    const selectRow = (record: AggregationResult, index: any) => {\n        setSelectedIndex(index)\n        onClick(record)\n        setSelectedResult(record)\n    };\n\n    const setRowClassName = (record: AggregationResult, index: number) => {\n        return index === selectedIndex ? 'clickRowStyl' : '';\n    };\n\n    useEffect(() => {\n        if (data === undefined || data.length === 0) {\n            setColumns([])\n            setFormattedData([])\n            return\n        }\n        const newCols: ColumnsType<AggregationResult> = []\n        const sample = data[0]\n\n        Object.keys(sample).map(s => {\n            if (s !== 'conditions') {\n                newCols.push({\n                    title: s,\n                    dataIndex: s,\n                    render: getRenderByValue(s),\n                    sorter: getSorter(s as keyof Stats)\n\n                });\n                return\n            }\n            // conditions field\n            Object.keys(sample[s]).map(k => {\n                // @ts-ignore\n                for (const c of sample[s][k]) {\n                    newCols.push({\n                        title: c.field,\n                        dataIndex: c.field,\n                        render: getRenderByValue(s)\n                    })\n                }\n            })\n        })\n        setColumns(newCols)\n\n        // Flat results\n        const newFormattedData: Array<AggregationResult> = []\n        for (const entry of data) {\n            const formattedEntry = {...entry}\n            Object.keys(entry.conditions).map(k => {\n                // @ts-ignore\n                for (const cond of entry.conditions[k]) {\n                    // @ts-ignore\n                    formattedEntry[cond.field] = cond.value\n                }\n            })\n            newFormattedData.push(formattedEntry)\n        }\n        setFormattedData(newFormattedData)\n    }, [data])\n\n    if (data === undefined || data.length === 0) {\n        return <Empty/>\n    }\n    let title = constructTitle(selectedResult);\n\n    return <Collapse defaultActiveKey={['1']}>\n        <Panel header={title} key=\"1\">\n            <Table\n                columns={columns}\n                dataSource={formattedData}\n                size=\"small\"\n                style={{cursor: \"pointer\"}}\n                onRow={(record, index) => ({\n                    onClick: () => {\n                        selectRow(record, index);\n                    },\n                })}\n                rowClassName={setRowClassName}\n            />\n        </Panel>\n    </Collapse>\n}","/home/ivan/projects/chartpapa/front/src/components/equity/DisplaySettingsComp.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/filter-view/FilterView.tsx",[],"/home/ivan/projects/chartpapa/front/src/api/runtime.ts",[],"/home/ivan/projects/chartpapa/front/src/api/apis/DefaultApi.ts",[],"/home/ivan/projects/chartpapa/front/src/services/quantizationUtils.ts",["292"],"export enum QuantinizeAggType {\n    Quantile,\n    Range\n}\n\nexport type QuantinizeFunction = (val: number) => string\n\nfunction sortNumber(a: number, b: number) {\n    return a - b\n}\n\nexport function GetContQuantizationFunc(valuesArr: Array<number>, numGroups: number, qType: QuantinizeAggType): QuantinizeFunction {\n    let splitPointsArray: Array<number> = []\n    if (qType === QuantinizeAggType.Quantile) {\n        splitPointsArray = getQuantiles(valuesArr, numGroups)\n    } else {\n        splitPointsArray = getRanges(valuesArr, numGroups)\n    }\n    splitPointsArray.sort(sortNumber)\n\n    return (val: number): string => {\n        let lowerBand = splitPointsArray[0]\n        for (const p of splitPointsArray) {\n            if (val <= p) {\n                return getStringValueFromRange(lowerBand, p)\n            }\n            lowerBand = p\n        }\n\n        return `${getStringByValue(lowerBand)}-inf`\n    }\n}\n\nfunction quantile(array: Array<number>, percentile: number): number {\n    let index = percentile / 100.0 * (array.length - 1)\n    if (Math.floor(index) == index) {\n        return array[index]\n    } else {\n        const i = Math.floor(index)\n        const fraction = index - i\n        return array[i] + (array[i + 1] - array[i]) * fraction\n    }\n}\n\nfunction getQArrayFromQNumber(numQuantiles: number): Array<number> {\n    const qStep = 100.0 / numQuantiles\n    console.log(qStep)\n    const qBlocks: Array<number> = []\n    let lastQ = 0\n    while (true) {\n        if (lastQ >= 100) {\n            break\n        }\n        lastQ += qStep\n        lastQ = Math.min(lastQ, 100)\n        if (100 - lastQ < 0.5 * qStep) {\n            qBlocks.push(100)\n            break\n        }\n        qBlocks.push(lastQ)\n    }\n    return qBlocks\n}\n\nfunction getQuantiles(array: Array<number>, numQuantiles: number): Array<number> {\n    array.sort(sortNumber)\n    const qArray = getQArrayFromQNumber(numQuantiles)\n    const quantilesValues: Array<number> = []\n    for (const q of qArray) {\n        quantilesValues.push(quantile(array, q))\n    }\n    return quantilesValues\n}\n\nfunction getRanges(valuesArr: Array<number>, groups: number): Array<number> {\n    valuesArr.sort(sortNumber)\n    const min = valuesArr[0]\n    const max = valuesArr[valuesArr.length - 1]\n    const rStep = (max - min) / groups\n    const rBlocks: Array<number> = []\n    let lastQ = min\n    while (true) {\n        if (lastQ >= max) {\n            break\n        }\n        lastQ += rStep\n        lastQ = Math.min(lastQ, max)\n        if (max - lastQ < 0.5 * rStep) {\n            rBlocks.push(max)\n            break\n        }\n        rBlocks.push(lastQ)\n    }\n    return rBlocks\n}\n\n\nfunction getStringValueFromRange(p1: number, p2: number): string {\n    return `${getStringByValue(p1)}-${getStringByValue(p2)}`\n}\n\nfunction getStringByValue(val: number): string {\n    const absVal = Math.abs(val)\n    if (absVal < 0.2) {\n        return `${val.toFixed(3)}`\n    }\n    if (absVal < 1) {\n        return `${val.toFixed(2)}`\n    }\n\n    if (absVal < 100) {\n        return `${Math.round(val)}`\n    }\n\n    if (absVal < 1000) {\n        return `${Math.round(val / 100) * 100}`\n    }\n    if (absVal < 10000) {\n        return `${Math.round(val / 500) * 500}`\n    }\n    return `${Math.round(val / 1000)}K`\n}\n\n\n\n\n\n","/home/ivan/projects/chartpapa/front/src/components/factors/PieWidget.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/CategoryFactorWidget.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/tables/TradesAndOrders.tsx",["293","294","295","296","297"],"import React, {useState} from \"react\";\nimport {OrderComp} from \"./OrdersTable\";\nimport {TradesTable} from \"./TradesTable\";\nimport {Trade} from \"../../api/models\";\nimport {DisplayTrade} from \"../candlestick/DisplayTrade\";\nimport {Col, Row} from \"antd\";\n\nexport const TradesAndOrders = (props: { trades: Array<Trade> }) => {\n    const {trades} = props\n    const [tradeId, setTradeId] = useState('')\n\n\n\n    return <div style={{height : '700px'}}>\n        <TradesTable trades={trades} onRow={(t) => {\n            setTradeId(t.tradeId)\n        }}/>\n        <DisplayTrade tradeId={tradeId}/>\n        </div>\n\n        {/*<OrderComp tradeId={tradeId}/>*/}\n}","/home/ivan/projects/chartpapa/front/src/api/models/index.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Trade.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/TagsMetaSummary.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Side.ts",[],"/home/ivan/projects/chartpapa/front/src/components/tables/TradesTable.tsx",["298"],"import React, {useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\n\nimport {Table} from 'antd';\nimport {Trade} from \"../../api/models\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {getRenderByValue} from \"./utils\";\n\n\nexport const TradesTable = (props: { trades: Array<Trade>, onRow: (t: Trade) => void }) => {\n    const {trades} = props;\n\n    const [tradeId, setTradeId] = useState('')\n    const [columns, setColumns] = useState<ColumnsType<Trade>>()\n\n    useEffect(() => {\n        if (trades === undefined || trades.length === 0) {\n            setColumns([])\n            return\n        }\n        const sample = trades[0]\n        const newCols: ColumnsType<Trade> = []\n\n        Object.keys(sample).map(s => {\n            newCols.push({\n                title: s,\n                dataIndex: s,\n                render: getRenderByValue(s)\n            })\n        })\n        setColumns(newCols)\n    }, [trades])\n\n\n    const getRowClassName = (record: Trade) => {\n        return record.tradeId === tradeId ? 'clickRowStyl' : '';\n    };\n\n    return <Table<Trade>\n        columns={columns} dataSource={trades}\n        pagination={{pageSize: 50}} scroll={{y: 240}} size=\"small\"\n        rowClassName={getRowClassName}\n\n        onRow={(record, index) => ({\n            onClick: (event) => {\n                setTradeId(record.tradeId)\n                props.onRow(record)\n            }\n        })}\n    />\n}\n\n\n","/home/ivan/projects/chartpapa/front/src/components/tables/OrdersTable.tsx",["299","300"],"import React, {useEffect, useMemo, useState} from 'react';\nimport 'antd/dist/antd.css';\n\nimport {Table} from 'antd';\nimport {Order} from \"../../api/models\";\nimport {ColumnsType} from 'antd/es/table';\nimport {IMainState} from \"../../reducers/reducers\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {getRenderByValue} from \"./utils\";\n\n\nexport const OrderComp = (props: { tradeId: string }) => {\n\n\n    let allOrders = useMappedState((state: IMainState) => {\n        return state.orders\n    });\n\n    const orders = useMemo(() => {\n        return allOrders.filter(it => it.tradeId === props.tradeId)\n    }, [props.tradeId])\n\n    return <OrdersTable orders={orders}/>\n}\n\n\nexport const OrdersTable = (props: { orders: Array<Order> }) => {\n    const {orders} = props;\n    const [columns, setColumns] = useState<ColumnsType<Order>>()\n    useEffect(() => {\n        if (orders === undefined || orders.length === 0) {\n            setColumns([])\n            return\n        }\n        const sample = orders[0]\n        const newCols: ColumnsType<Order> = []\n\n        Object.keys(sample).map(s => {\n            newCols.push({\n                title: s,\n                dataIndex: s,\n                render: getRenderByValue(s)\n            })\n        })\n        setColumns(newCols)\n    }, [orders])\n\n    return <Table<Order> columns={columns}\n                         dataSource={orders}\n                         pagination={\n                             {\n                                 pageSize: 50\n                             }\n                         }\n                         scroll={\n                             {\n                                 y: 240\n                             }\n                         }\n                         size=\"small\"/>\n}",["301","302"],"/home/ivan/projects/chartpapa/front/src/api/models/PortfolioInstrumentsMeta.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Portfolio.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/OrderStatus.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Instrument.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/OrderOrderType.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/DiscreteMeta.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Order.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/ContinuousMeta.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Candle.ts",[],"/home/ivan/projects/chartpapa/front/src/components/candlestick/DisplayTrade.tsx",["303"],"import React, {useEffect, useState} from 'react';\n\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport {portfoliosApi} from \"../../services/api/services\";\n// @ts-ignore\nimport {CandlesApi} from \"../../api/apis\";\n\nrequire('highcharts/modules/annotations')(Highcharts)\n\nexport const DisplayTrade = (props: { tradeId: string }) => {\n\n    const [opts, setOpts] = useState<any>({})\n\n    useEffect(() => {\n\n        portfoliosApi.displayTrade({tradeId: props.tradeId}).then(dt => {\n\n            setOpts(JSON.parse(dt))\n        })\n    }, [props.tradeId]);\n\n\n    return (\n        <div style={{height : '700px'}}>\n        <HighchartsReact\n            highcharts={Highcharts}\n            constructorType={\"stockChart\"}\n            options={opts}/>\n        </div>\n    );\n}","/home/ivan/projects/chartpapa/front/src/components/factors/FlatFactorsComp.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/ContinuosSlider.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/DiscreteSlider.tsx",[],{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","severity":1,"message":"309","line":25,"column":8,"nodeType":"310","endLine":25,"endColumn":10,"suggestions":"311"},{"ruleId":"312","severity":1,"message":"313","line":3,"column":5,"nodeType":"314","messageId":"315","endLine":3,"endColumn":6},{"ruleId":"312","severity":1,"message":"316","line":6,"column":19,"nodeType":"314","messageId":"315","endLine":6,"endColumn":29},{"ruleId":"308","severity":1,"message":"317","line":87,"column":8,"nodeType":"310","endLine":87,"endColumn":21,"suggestions":"318"},{"ruleId":"308","severity":1,"message":"309","line":97,"column":8,"nodeType":"310","endLine":97,"endColumn":10,"suggestions":"319"},{"ruleId":"320","severity":1,"message":"321","line":104,"column":35,"nodeType":"322","messageId":"323","endLine":104,"endColumn":37},{"ruleId":"312","severity":1,"message":"313","line":18,"column":5,"nodeType":"314","messageId":"315","endLine":18,"endColumn":6},{"ruleId":"312","severity":1,"message":"324","line":3,"column":7,"nodeType":"314","messageId":"315","endLine":3,"endColumn":30},{"ruleId":"312","severity":1,"message":"325","line":6,"column":7,"nodeType":"314","messageId":"315","endLine":6,"endColumn":31},{"ruleId":"326","severity":1,"message":"327","line":26,"column":23,"nodeType":"328","messageId":"329","endLine":26,"endColumn":25},{"ruleId":"312","severity":1,"message":"330","line":73,"column":13,"nodeType":"314","messageId":"315","endLine":73,"endColumn":28},{"ruleId":"312","severity":1,"message":"331","line":75,"column":13,"nodeType":"314","messageId":"315","endLine":75,"endColumn":29},{"ruleId":"326","severity":1,"message":"327","line":89,"column":43,"nodeType":"328","messageId":"329","endLine":89,"endColumn":45},{"ruleId":"326","severity":1,"message":"327","line":113,"column":22,"nodeType":"328","messageId":"329","endLine":113,"endColumn":24},{"ruleId":"320","severity":1,"message":"321","line":167,"column":25,"nodeType":"322","messageId":"323","endLine":167,"endColumn":27},{"ruleId":"332","severity":1,"message":"333","line":238,"column":35,"nodeType":"322","messageId":"334","endLine":241,"endColumn":10},{"ruleId":"332","severity":1,"message":"333","line":245,"column":37,"nodeType":"322","messageId":"334","endLine":249,"endColumn":10},{"ruleId":"320","severity":1,"message":"321","line":20,"column":32,"nodeType":"322","messageId":"323","endLine":20,"endColumn":34},{"ruleId":"308","severity":1,"message":"335","line":44,"column":25,"nodeType":"336","endLine":44,"endColumn":29},{"ruleId":"312","severity":1,"message":"337","line":4,"column":9,"nodeType":"314","messageId":"315","endLine":4,"endColumn":13},{"ruleId":"312","severity":1,"message":"313","line":8,"column":5,"nodeType":"314","messageId":"315","endLine":8,"endColumn":6},{"ruleId":"312","severity":1,"message":"338","line":8,"column":9,"nodeType":"314","messageId":"315","endLine":8,"endColumn":19},{"ruleId":"312","severity":1,"message":"339","line":9,"column":9,"nodeType":"314","messageId":"315","endLine":9,"endColumn":22},{"ruleId":"308","severity":1,"message":"340","line":128,"column":8,"nodeType":"310","endLine":128,"endColumn":22,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":172,"column":17,"nodeType":"344","endLine":175,"endColumn":23},{"ruleId":"345","severity":1,"message":"346","line":195,"column":19,"nodeType":"347","messageId":"348","endLine":195,"endColumn":39,"fix":"349"},{"ruleId":"320","severity":1,"message":"321","line":25,"column":57,"nodeType":"322","messageId":"323","endLine":25,"endColumn":59},{"ruleId":"320","severity":1,"message":"350","line":59,"column":35,"nodeType":"322","messageId":"351","endLine":59,"endColumn":37},{"ruleId":"320","severity":1,"message":"321","line":68,"column":17,"nodeType":"352","messageId":"353","endLine":68,"endColumn":23},{"ruleId":"320","severity":1,"message":"321","line":71,"column":42,"nodeType":"322","messageId":"323","endLine":71,"endColumn":44},{"ruleId":"320","severity":1,"message":"321","line":88,"column":49,"nodeType":"322","messageId":"323","endLine":88,"endColumn":51},{"ruleId":"326","severity":1,"message":"327","line":36,"column":27,"nodeType":"328","messageId":"329","endLine":36,"endColumn":29},{"ruleId":"312","severity":1,"message":"354","line":2,"column":9,"nodeType":"314","messageId":"315","endLine":2,"endColumn":18},{"ruleId":"312","severity":1,"message":"355","line":6,"column":9,"nodeType":"314","messageId":"315","endLine":6,"endColumn":12},{"ruleId":"312","severity":1,"message":"356","line":6,"column":14,"nodeType":"314","messageId":"315","endLine":6,"endColumn":17},{"ruleId":"357","severity":1,"message":"358","line":21,"column":9,"nodeType":"359","messageId":"360","endLine":21,"endColumn":45},{"ruleId":"361","severity":1,"message":"362","line":21,"column":9,"nodeType":"359","messageId":"363","endLine":21,"endColumn":45},{"ruleId":"320","severity":1,"message":"321","line":24,"column":35,"nodeType":"322","messageId":"323","endLine":24,"endColumn":37},{"ruleId":"308","severity":1,"message":"364","line":21,"column":8,"nodeType":"310","endLine":21,"endColumn":23,"suggestions":"365"},{"ruleId":"320","severity":1,"message":"321","line":38,"column":35,"nodeType":"322","messageId":"323","endLine":38,"endColumn":37},{"ruleId":"304","replacedBy":"366"},{"ruleId":"306","replacedBy":"367"},{"ruleId":"312","severity":1,"message":"338","line":7,"column":9,"nodeType":"314","messageId":"315","endLine":7,"endColumn":19},"no-native-reassign",["368"],"no-negated-in-lhs",["369"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["370"],"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","'SelectInfo' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'onPortfolioSelected'. Either include them or remove the dependency array.",["371"],["372"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'LAST_INSTRUMENTS_UPDATE' is assigned a value but never used.","'PORTFOLIO_AVAILABLE_TAGS' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'last_point_long' is assigned a value but never used.","'last_point_short' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'positionExposure'.","unsafeRefs","Assignments to the 'initError' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'Tabs' is defined but never used.","'CandlesApi' is defined but never used.","'Configuration' is defined but never used.","React Hook useEffect has missing dependencies: 'maxTs' and 'minTs'. Either include them or remove the dependency array.",["373"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property [\"split_groups\"] found.","Property","unnecessarilyComputedProperty",{"range":"374","text":"375"},"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","'OrderComp' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","React Hook useMemo has a missing dependency: 'allOrders'. Either include it or remove the dependency array.",["376"],["368"],["369"],"no-global-assign","no-unsafe-negation",{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"377","fix":"381"},{"desc":"382","fix":"383"},[7526,7542],"\"split_groups\"",{"desc":"384","fix":"385"},"Update the dependencies array to be: [dispatch]",{"range":"386","text":"387"},"Update the dependencies array to be: [dispatch, onPortfolioSelected, portfolioID]",{"range":"388","text":"389"},{"range":"390","text":"387"},"Update the dependencies array to be: [maxTs, minTs, props.ticker]",{"range":"391","text":"392"},"Update the dependencies array to be: [allOrders, props.tradeId]",{"range":"393","text":"394"},[860,862],"[dispatch]",[2957,2970],"[dispatch, onPortfolioSelected, portfolioID]",[3383,3385],[3301,3315],"[maxTs, minTs, props.ticker]",[613,628],"[allOrders, props.tradeId]"]
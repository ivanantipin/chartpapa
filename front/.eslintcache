[{"/home/ivan/projects/chartpapa/front/src/index.tsx":"1","/home/ivan/projects/chartpapa/front/src/serviceWorker.js":"2","/home/ivan/projects/chartpapa/front/src/App.tsx":"3","/home/ivan/projects/chartpapa/front/src/store.ts":"4","/home/ivan/projects/chartpapa/front/src/base.tsx":"5","/home/ivan/projects/chartpapa/front/src/reducers/reducers.ts":"6","/home/ivan/projects/chartpapa/front/src/actions/actions.ts":"7","/home/ivan/projects/chartpapa/front/src/services/api/services.ts":"8","/home/ivan/projects/chartpapa/front/src/components/sider/SiderMenu.tsx":"9","/home/ivan/projects/chartpapa/front/src/components/header/Header.tsx":"10","/home/ivan/projects/chartpapa/front/src/pages/by-symbol/BySymbolPage.tsx":"11","/home/ivan/projects/chartpapa/front/src/pages/total/TotalPage.tsx":"12","/home/ivan/projects/chartpapa/front/src/pages/aggregation/AggregationPage.tsx":"13","/home/ivan/projects/chartpapa/front/src/services/localStorage.ts":"14","/home/ivan/projects/chartpapa/front/src/services/tradeUtils.ts":"15","/home/ivan/projects/chartpapa/front/src/components/equity/EquityPanel.tsx":"16","/home/ivan/projects/chartpapa/front/src/components/equity/StatsPanel.tsx":"17","/home/ivan/projects/chartpapa/front/src/components/factors/FactorsPanel.tsx":"18","/home/ivan/projects/chartpapa/front/src/components/factors/FilterComp.tsx":"19","/home/ivan/projects/chartpapa/front/src/components/tables/ByDateResults.tsx":"20","/home/ivan/projects/chartpapa/front/src/components/tables/SymbolResults.tsx":"21","/home/ivan/projects/chartpapa/front/src/templates/aggregate-and-filter/AggregateAndFilterTemplate.tsx":"22","/home/ivan/projects/chartpapa/front/src/api/index.ts":"23","/home/ivan/projects/chartpapa/front/src/api/apis/index.ts":"24","/home/ivan/projects/chartpapa/front/src/services/aggregationUtils.ts":"25","/home/ivan/projects/chartpapa/front/src/components/tables/utils.tsx":"26","/home/ivan/projects/chartpapa/front/src/components/factors/FactorTab.tsx":"27","/home/ivan/projects/chartpapa/front/src/components/factors/FlatFactorsPage.tsx":"28","/home/ivan/projects/chartpapa/front/src/components/candlestick/CandlestickHigh.tsx":"29","/home/ivan/projects/chartpapa/front/src/components/perfromance/StatWidget.tsx":"30","/home/ivan/projects/chartpapa/front/src/components/forms/AggregationForm.tsx":"31","/home/ivan/projects/chartpapa/front/src/components/tables/AggregationTable.tsx":"32","/home/ivan/projects/chartpapa/front/src/components/equity/DisplaySettingsComp.tsx":"33","/home/ivan/projects/chartpapa/front/src/components/filter-view/FilterView.tsx":"34","/home/ivan/projects/chartpapa/front/src/api/runtime.ts":"35","/home/ivan/projects/chartpapa/front/src/api/apis/DefaultApi.ts":"36","/home/ivan/projects/chartpapa/front/src/services/quantizationUtils.ts":"37","/home/ivan/projects/chartpapa/front/src/components/factors/PieWidget.tsx":"38","/home/ivan/projects/chartpapa/front/src/components/factors/CategoryFactorWidget.tsx":"39","/home/ivan/projects/chartpapa/front/src/components/tables/TradesAndOrders.tsx":"40","/home/ivan/projects/chartpapa/front/src/api/models/index.ts":"41","/home/ivan/projects/chartpapa/front/src/api/models/Trade.ts":"42","/home/ivan/projects/chartpapa/front/src/api/models/TagsMetaSummary.ts":"43","/home/ivan/projects/chartpapa/front/src/api/models/Side.ts":"44","/home/ivan/projects/chartpapa/front/src/components/tables/TradesTable.tsx":"45","/home/ivan/projects/chartpapa/front/src/components/tables/OrdersTable.tsx":"46","/home/ivan/projects/chartpapa/front/src/api/models/PortfolioInstrumentsMeta.ts":"47","/home/ivan/projects/chartpapa/front/src/api/models/Portfolio.ts":"48","/home/ivan/projects/chartpapa/front/src/api/models/OrderStatus.ts":"49","/home/ivan/projects/chartpapa/front/src/api/models/Instrument.ts":"50","/home/ivan/projects/chartpapa/front/src/api/models/OrderOrderType.ts":"51","/home/ivan/projects/chartpapa/front/src/api/models/DiscreteMeta.ts":"52","/home/ivan/projects/chartpapa/front/src/api/models/Order.ts":"53","/home/ivan/projects/chartpapa/front/src/api/models/ContinuousMeta.ts":"54","/home/ivan/projects/chartpapa/front/src/api/models/Candle.ts":"55","/home/ivan/projects/chartpapa/front/src/api/models/HChart.ts":"56","/home/ivan/projects/chartpapa/front/src/api/models/HLabel.ts":"57","/home/ivan/projects/chartpapa/front/src/api/models/HAnnotation.ts":"58","/home/ivan/projects/chartpapa/front/src/api/models/HMarker.ts":"59","/home/ivan/projects/chartpapa/front/src/api/models/HAxis.ts":"60","/home/ivan/projects/chartpapa/front/src/api/models/HLegend.ts":"61","/home/ivan/projects/chartpapa/front/src/api/models/HNavigator.ts":"62","/home/ivan/projects/chartpapa/front/src/api/models/HOptions.ts":"63","/home/ivan/projects/chartpapa/front/src/api/models/HPoint.ts":"64","/home/ivan/projects/chartpapa/front/src/api/models/HRangeSelector.ts":"65","/home/ivan/projects/chartpapa/front/src/api/models/HScrollbar.ts":"66","/home/ivan/projects/chartpapa/front/src/api/models/HSeries.ts":"67","/home/ivan/projects/chartpapa/front/src/api/models/HShape.ts":"68","/home/ivan/projects/chartpapa/front/src/api/models/HStyle.ts":"69","/home/ivan/projects/chartpapa/front/src/api/models/HTitle.ts":"70","/home/ivan/projects/chartpapa/front/src/api/models/OrderSide.ts":"71","/home/ivan/projects/chartpapa/front/src/components/candlestick/DisplayTrade.tsx":"72"},{"size":463,"mtime":1591244025696,"results":"73","hashOfConfig":"74"},{"size":5086,"mtime":1590317657594,"results":"75","hashOfConfig":"74"},{"size":443,"mtime":1590470834444,"results":"76","hashOfConfig":"74"},{"size":123,"mtime":1592862143073,"results":"77","hashOfConfig":"74"},{"size":1857,"mtime":1594923953422,"results":"78","hashOfConfig":"74"},{"size":3445,"mtime":1593491777551,"results":"79","hashOfConfig":"74"},{"size":1618,"mtime":1593491777551,"results":"80","hashOfConfig":"74"},{"size":356,"mtime":1610748836349,"results":"81","hashOfConfig":"74"},{"size":1596,"mtime":1610748286154,"results":"82","hashOfConfig":"74"},{"size":4296,"mtime":1610824445567,"results":"83","hashOfConfig":"74"},{"size":1010,"mtime":1610822035996,"results":"84","hashOfConfig":"74"},{"size":2851,"mtime":1610876030304,"results":"85","hashOfConfig":"74"},{"size":233,"mtime":1592885384160,"results":"86","hashOfConfig":"74"},{"size":1821,"mtime":1610738699048,"results":"87","hashOfConfig":"74"},{"size":8705,"mtime":1610743774172,"results":"88","hashOfConfig":"74"},{"size":1827,"mtime":1610743826272,"results":"89","hashOfConfig":"74"},{"size":427,"mtime":1594930600814,"results":"90","hashOfConfig":"74"},{"size":604,"mtime":1598425364016,"results":"91","hashOfConfig":"74"},{"size":4399,"mtime":1610824777483,"results":"92","hashOfConfig":"74"},{"size":1033,"mtime":1594927211569,"results":"93","hashOfConfig":"74"},{"size":5746,"mtime":1594927211553,"results":"94","hashOfConfig":"74"},{"size":2325,"mtime":1598379742851,"results":"95","hashOfConfig":"74"},{"size":77,"mtime":1610876299447,"results":"96","hashOfConfig":"74"},{"size":30,"mtime":1610876299451,"results":"97","hashOfConfig":"74"},{"size":5458,"mtime":1610824148588,"results":"98","hashOfConfig":"74"},{"size":1350,"mtime":1593152804818,"results":"99","hashOfConfig":"74"},{"size":1471,"mtime":1598425364188,"results":"100","hashOfConfig":"74"},{"size":6529,"mtime":1610272610531,"results":"101","hashOfConfig":"74"},{"size":3840,"mtime":1610738136163,"results":"102","hashOfConfig":"74"},{"size":939,"mtime":1591848827634,"results":"103","hashOfConfig":"74"},{"size":7673,"mtime":1593629840639,"results":"104","hashOfConfig":"74"},{"size":3896,"mtime":1594929216194,"results":"105","hashOfConfig":"74"},{"size":806,"mtime":1594923706697,"results":"106","hashOfConfig":"74"},{"size":1655,"mtime":1594930699667,"results":"107","hashOfConfig":"74"},{"size":10005,"mtime":1610876330888,"results":"108","hashOfConfig":"74"},{"size":11136,"mtime":1610876299447,"results":"109","hashOfConfig":"74"},{"size":3252,"mtime":1593629840667,"results":"110","hashOfConfig":"74"},{"size":1900,"mtime":1595482747624,"results":"111","hashOfConfig":"74"},{"size":2784,"mtime":1595482903568,"results":"112","hashOfConfig":"74"},{"size":472,"mtime":1593233572550,"results":"113","hashOfConfig":"74"},{"size":813,"mtime":1610876299451,"results":"114","hashOfConfig":"74"},{"size":3245,"mtime":1610876347844,"results":"115","hashOfConfig":"74"},{"size":1963,"mtime":1610876299363,"results":"116","hashOfConfig":"74"},{"size":790,"mtime":1610876299359,"results":"117","hashOfConfig":"74"},{"size":1414,"mtime":1593236193958,"results":"118","hashOfConfig":"74"},{"size":1757,"mtime":1593152804818,"results":"119","hashOfConfig":"74"},{"size":2062,"mtime":1610876299355,"results":"120","hashOfConfig":"74"},{"size":1415,"mtime":1610876299347,"results":"121","hashOfConfig":"74"},{"size":952,"mtime":1610876299339,"results":"122","hashOfConfig":"74"},{"size":2062,"mtime":1610876299323,"results":"123","hashOfConfig":"74"},{"size":1057,"mtime":1610876299335,"results":"124","hashOfConfig":"74"},{"size":1393,"mtime":1610876299211,"results":"125","hashOfConfig":"74"},{"size":4385,"mtime":1610876384328,"results":"126","hashOfConfig":"74"},{"size":1535,"mtime":1610876299203,"results":"127","hashOfConfig":"74"},{"size":1917,"mtime":1610876299195,"results":"128","hashOfConfig":"74"},{"size":1663,"mtime":1610876299231,"results":"129","hashOfConfig":"74"},{"size":3416,"mtime":1610876299239,"results":"130","hashOfConfig":"74"},{"size":1727,"mtime":1610876299215,"results":"131","hashOfConfig":"74"},{"size":1224,"mtime":1610876299251,"results":"132","hashOfConfig":"74"},{"size":2544,"mtime":1610876299223,"results":"133","hashOfConfig":"74"},{"size":2898,"mtime":1610876299243,"results":"134","hashOfConfig":"74"},{"size":1254,"mtime":1610876299255,"results":"135","hashOfConfig":"74"},{"size":4306,"mtime":1610876299267,"results":"136","hashOfConfig":"74"},{"size":1747,"mtime":1610876299275,"results":"137","hashOfConfig":"74"},{"size":1294,"mtime":1610876299279,"results":"138","hashOfConfig":"74"},{"size":1254,"mtime":1610876299287,"results":"139","hashOfConfig":"74"},{"size":2655,"mtime":1610876299295,"results":"140","hashOfConfig":"74"},{"size":3192,"mtime":1610876299303,"results":"141","hashOfConfig":"74"},{"size":1451,"mtime":1610876299307,"results":"142","hashOfConfig":"74"},{"size":1157,"mtime":1610876299315,"results":"143","hashOfConfig":"74"},{"size":820,"mtime":1610876299339,"results":"144","hashOfConfig":"74"},{"size":921,"mtime":1610876481034,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"19hvjn0",{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"148"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"148"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"148"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"148"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"148"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"148"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"148"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"148"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"148"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"148"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"148"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"221","usedDeprecatedRules":"148"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"148"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"148"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"148"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"148"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ivan/projects/chartpapa/front/src/index.tsx",[],["308","309"],"/home/ivan/projects/chartpapa/front/src/serviceWorker.js",[],["310","311"],"/home/ivan/projects/chartpapa/front/src/App.tsx",[],"/home/ivan/projects/chartpapa/front/src/store.ts",[],"/home/ivan/projects/chartpapa/front/src/base.tsx",["312"],"import React, {useEffect} from 'react';\nimport './App.css';\nimport {Layout} from 'antd';\nimport 'antd/dist/antd.css';\nimport {SiderMenu} from \"./components/sider/SiderMenu\";\nimport {Header} from \"./components/header/Header\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {TotalPage} from \"./pages/total/TotalPage\";\nimport {useDispatch} from \"react-redux\";\nimport {setPortfolios} from \"./actions/actions\";\nimport {portfoliosApi} from \"./services/api/services\";\nimport {BySymbolPage} from \"./pages/by-symbol/BySymbolPage\";\nimport {AggregationPage} from \"./pages/aggregation/AggregationPage\";\n\nconst {Content} = Layout;\n\nexport const Base = (props: any) => {\n\n    let dispatch = useDispatch();\n\n    useEffect(() => {\n        portfoliosApi.portfoliosList().then(lst => {\n            dispatch(setPortfolios(lst))\n        })\n    }, [])\n\n\n    return (\n        <Router>\n            <Switch>\n                <Layout style={{height: '2000px'}}>\n                    <SiderMenu/>\n                    <Layout className=\"site-layout\">\n                        <Header/>\n                        <Content style={{padding: '0 10px', height: '100%'}}>\n                            <div className=\"site-layout-content\">\n                                <Route path='/total'>\n                                    <TotalPage/>\n                                </Route>\n                                <Route path='/by-symbol'>\n                                    <BySymbolPage/>\n                                </Route>\n                                <Route path='/aggregation'>\n                                    <AggregationPage/>\n                                </Route>\n                            </div>\n                        </Content>\n                    </Layout>\n                </Layout>\n            </Switch>\n        </Router>\n    )\n}","/home/ivan/projects/chartpapa/front/src/reducers/reducers.ts",["313"],"import {Instrument, Order, Portfolio, PortfolioInstrumentsMeta, TagsMetaSummary, Trade} from \"../api/models\";\n\nlet _ = require('lodash');\n\nexport interface InstrumentMap {\n    [key: string]: Instrument\n}\n\nexport interface IMainState {\n    portfolioID?: string,\n    dailyQuotes: Array<any>,\n    intradayQuotes: Array<any>,\n    availablePortfolios: Array<Portfolio>,\n    trades: Array<Trade>,\n    orders: Array<Order>,\n    availableTags?: TagsMetaSummary,\n    availableInstrumentsMeta?: PortfolioInstrumentsMeta,\n    loadStatus: LoadStatus\n    instrumentsMap?: InstrumentMap\n}\n\nexport enum LoadStatusEnum {\n    Loading, Loaded, Error\n}\n\nexport interface LoadStatus {\n    [key: string]: LoadStatusEnum\n}\n\nexport const loadingLoadingState = {\n    instruments: LoadStatusEnum.Loading,\n    orders: LoadStatusEnum.Loading,\n    tags: LoadStatusEnum.Loading,\n    trades: LoadStatusEnum.Loading\n};\n\n\nconst initialState: IMainState = {\n    portfolioID: undefined,\n    dailyQuotes: [],\n    intradayQuotes: [],\n    availablePortfolios: [],\n    trades: [],\n    orders: [],\n    loadStatus: loadingLoadingState\n};\n\n\nexport const SET_PORTFOLIO_ID = 'SET_PORTFOLIO_ID';\nexport const SET_AVAILABLE_PORTFOLIOS = 'SET_AVAILABLE_PORTFOLIOS';\nexport const TRADES_LOADED = 'LOAD_TRADES';\nexport const SET_LOAD_STATUS = 'SET_LOAD_STATUS';\nexport const ORDERS_LOADED = 'ORDERS_LOADED';\n\nexport const DAILY_QUOTES_LOADED = 'DAILY_QUOTES_LOADED';\nexport const INTRADAY_QUOTES_LOADED = 'INTRADAY_QUOTES_LOADED';\nexport const SET_TAGS_AVAILABLE = 'SET_TAGS_AVAILABLE'\nexport const SET_AVAILABLE_INSTRUMENTS_META = 'SET_AVAILABLE_INSTRUMENTS_META'\nexport const INSTRUMENTS_MAP_LOADED = 'INSTRUMENTS_MAP_LOADED'\n\n\nexport const reducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case TRADES_LOADED:\n            const trd: Array<Trade> = action.payload\n            return {\n                ...state,\n                trades: trd.sort((t0, t1) => t0.openTime - t1.openTime),\n            };\n        case ORDERS_LOADED:\n            const ord: Array<Order> = action.payload\n            return {\n                ...state,\n                orders: ord.sort((t0, t1) => t0.placeTime - t1.placeTime),\n            };\n        case SET_AVAILABLE_PORTFOLIOS:\n            return {\n                ...state,\n                availablePortfolios: action.payload\n            };\n        case SET_LOAD_STATUS:\n            return {\n                ...state,\n                loadStatus: {...state.loadStatus, ...action.payload}\n            };\n\n        case SET_PORTFOLIO_ID:\n            return {\n                ...state,\n                portfolioID: action.payload\n            };\n        case DAILY_QUOTES_LOADED:\n            return {\n                ...state,\n                dailyQuotes: action.payload\n            };\n\n        case INTRADAY_QUOTES_LOADED:\n            return {\n                ...state,\n                intradayQuotes: action.payload\n            };\n        case SET_TAGS_AVAILABLE:\n            return {\n                ...state,\n                availableTags: action.payload\n            }\n        case SET_AVAILABLE_INSTRUMENTS_META:\n            return {\n                ...state,\n                availableInstrumentsMeta: action.payload\n            }\n        case INSTRUMENTS_MAP_LOADED:\n            return {\n                ...state,\n                instrumentsMap: action.payload\n            }\n        default:\n            return state\n    }\n};\n","/home/ivan/projects/chartpapa/front/src/actions/actions.ts",[],"/home/ivan/projects/chartpapa/front/src/services/api/services.ts",[],"/home/ivan/projects/chartpapa/front/src/components/sider/SiderMenu.tsx",["314"],"import React, {useState} from 'react'\nimport {useHistory} from \"react-router-dom\";\nimport {Layout, Menu} from 'antd';\nimport 'antd/dist/antd.css';\nimport {AreaChartOutlined, DeploymentUnitOutlined} from '@ant-design/icons';\nimport {MenuInfo, SelectInfo} from \"rc-menu/lib/interface\";\n\n\nconst {Sider} = Layout;\n\n\nexport const SiderMenu = (props: any) => {\n\n    const [collapsed, setCollapsed] = useState(false)\n    const [selectedKey, setSelectedKey] = useState(\"/total\")\n\n    const history = useHistory();\n\n    return (\n        <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n            <Menu theme=\"dark\" mode=\"inline\"\n                  defaultSelectedKeys={['/total']}\n                  selectedKeys={[selectedKey]}\n                  onClick={(info: MenuInfo) => {\n                      history.push(info.key as string)\n                      setSelectedKey(info.key as string)\n                  }}\n            >\n                <Menu.Item key=\"/my-portfolios\" icon={<AreaChartOutlined/>}>\n                    Portfolios\n                </Menu.Item>\n                <Menu.Item key=\"/total\" icon={<AreaChartOutlined/>}>\n                    Total\n                </Menu.Item>\n                <Menu.Item key=\"/by-symbol\" icon={<AreaChartOutlined/>}>\n                    By Symbol\n                </Menu.Item>\n                <Menu.Item key=\"/aggregation\" icon={<AreaChartOutlined/>}>\n                    Aggregation\n                </Menu.Item>\n                <Menu.Item key=\"6\" icon={<DeploymentUnitOutlined/>}>Compare</Menu.Item>\n            </Menu>\n        </Sider>\n    )\n}","/home/ivan/projects/chartpapa/front/src/components/header/Header.tsx",["315","316","317"],"import React, {useEffect} from \"react\";\nimport {Button, PageHeader, Select, Spin} from \"antd\";\nimport {useDispatch} from \"react-redux\"\nimport {\n    setAvailableInstrumentsMeta,\n    setAvailableTags,\n    setInstruments,\n    setLoadStatus,\n    setOrders,\n    setPortfolioID,\n    setTrades\n} from \"../../actions/actions\"\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState, loadingLoadingState, LoadStatus, LoadStatusEnum} from \"../../reducers/reducers\";\nimport {instrumentsApi, portfoliosApi} from \"../../services/api/services\";\nimport {\n    getLocalStoredInstruments,\n    setLocalStoredInstruments,\n    setStoredPortfolioAvailableTags,\n    setStoredPortfolioInstrumentsMeta\n} from \"../../services/localStorage\";\n\nconst {Option} = Select;\n\nexport const portfolioStorage = window.localStorage;\n\n\nconst StatusComp = (props: { status: LoadStatus }) => {\n    let values = Object.values(props.status);\n    if (values.some(it => it === LoadStatusEnum.Error)) {\n        return <div key=\"error\">Error load</div>\n    }\n    if (values.some(it => it === LoadStatusEnum.Loading)) {\n        return <Spin key=\"wait\"/>\n    }\n    return <div key=\"loaded\">Loaded</div>\n};\n\n\nexport const Header = (props: any) => {\n\n    const {availablePortfolios, portfolioID, loadStatus} = useMappedState((state: IMainState) => state)\n\n\n    let dispatch = useDispatch();\n\n    const onPortfolioSelected = (value: string) => {\n        if (value) {\n            portfolioStorage.setItem(\"portfolio\", value);\n            dispatch(setPortfolioID(value));\n        }\n    };\n\n    useEffect(() => {\n        let storedPortfolio = portfolioStorage.getItem(\"portfolio\");\n        if (!portfolioID && storedPortfolio) {\n            onPortfolioSelected(storedPortfolio)\n        }\n\n        if (portfolioID) {\n            dispatch(setLoadStatus(loadingLoadingState))\n\n            portfoliosApi.portfoliosTradesList({portfolio: portfolioID}).then(trd => {\n                dispatch(setTrades(trd))\n                dispatch(setLoadStatus({trades: LoadStatusEnum.Loaded}))\n            });\n\n\n            portfoliosApi.portfoliosOrdersList({portfolio: portfolioID}).then(orders => {\n                dispatch(setOrders(orders))\n                dispatch(setLoadStatus({orders: LoadStatusEnum.Loaded}))\n            });\n\n            const portfolio = portfolioID as string\n            portfoliosApi.portfoliosAvailableInstrumentsMetaList(\n                {portfolio}).then(meta => {\n                setStoredPortfolioInstrumentsMeta(portfolio, meta)\n                dispatch(setAvailableInstrumentsMeta(meta))\n                dispatch(setLoadStatus({instruments: LoadStatusEnum.Loaded}))\n            });\n            portfoliosApi.portfoliosAvailableTagsList({portfolio}).then(tags => {\n                setStoredPortfolioAvailableTags(portfolio, tags)\n                dispatch(setAvailableTags(tags))\n                dispatch(setLoadStatus({tags: LoadStatusEnum.Loaded}))\n            });\n        }\n    }, [portfolioID])\n\n    useEffect(() => {\n        dispatch(setInstruments(getLocalStoredInstruments()))\n        dispatch(setLoadStatus({instruments: LoadStatusEnum.Loaded}))\n        instrumentsApi.instrumentsList().then(instruments => {\n            setLocalStoredInstruments(instruments)\n            dispatch(setInstruments(instruments))\n            dispatch(setLoadStatus({instruments: LoadStatusEnum.Loaded}))\n        })\n    }, [])\n\n\n    let options = null;\n\n    if (availablePortfolios !== undefined) {\n        options = [];\n        availablePortfolios.map(p => {\n            options.push(<Option key={p.name} value={p.name}>{p.name}</Option>)\n        })\n    }\n\n    const title = portfolioID === undefined ? \"Please choose portfolio\" : `Results for portfolio ${portfolioID}`;\n\n    return (\n        <PageHeader\n            ghost={false}\n            onBack={() => window.history.back()}\n            title={title}\n            extra={[\n                <StatusComp  key={\"0\"} status={loadStatus}/>,\n                <Button key=\"1\">Manage Portfolios</Button>,\n                <Select key=\"2\" style={{width: 200}} defaultValue=\"\" value={portfolioID} onSelect={onPortfolioSelected}>\n                    <Option value=\"\">Please select portfolio...</Option>\n                    {options}\n                </Select>\n            ]}\n        />\n    )\n};\n\n","/home/ivan/projects/chartpapa/front/src/pages/by-symbol/BySymbolPage.tsx",[],"/home/ivan/projects/chartpapa/front/src/pages/total/TotalPage.tsx",["318"],"import React, {useEffect, useReducer} from \"react\";\nimport {Collapse, Tabs} from \"antd\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState} from \"../../reducers/reducers\";\nimport {EquityPanel} from \"../../components/equity/EquityPanel\";\nimport {FactorsPanel} from \"../../components/factors/FactorsPanel\";\nimport {SymbolsAndChart} from \"../../components/tables/SymbolResults\";\nimport {DateStatTable} from \"../../components/tables/ByDateResults\";\nimport {StatsPanel} from \"../../components/equity/StatsPanel\";\nimport {Trade} from \"../../api/models\";\nimport {Filter, FilterComp} from \"../../components/factors/FilterComp\";\nimport {DisplayTrade} from \"../../components/candlestick/DisplayTrade\";\n\nconst {TabPane} = Tabs;\n\nconst {Panel} = Collapse;\n\nlet _ = require('lodash');\n\n\ninterface FilteredTrades {\n    filter: { [key: string]: Filter }\n    trades: Array<Trade>\n}\n\nexport const TotalPage = (props: any) => {\n\n    const origTrades = useMappedState((state: IMainState) => {\n        return state.trades\n    })\n\n    const [filter, dispatch] = useReducer((state: FilteredTrades, action: Filter) => {\n        const ff = {...state}\n        ff.filter[action.name] = action\n        let filters = Object.values(ff.filter);\n        ff.trades = origTrades.filter(it => {\n            return filters.length === 0 || filters.every(f => f.filter(it))\n        })\n        return ff\n    }, {\n        filter: {},\n        trades: origTrades\n    }, undefined)\n\n    useEffect(()=>{\n        dispatch({name : \"dummy\", filter : (t)=>true})\n        return\n    },[origTrades])\n\n    return (\n        <>\n            <Collapse defaultActiveKey={['1']}>\n                <Panel header={'Filter'} key=\"1\">\n                    <FilterComp onFilter={(f)=>{\n                        console.log(\"filter\", f)\n                        dispatch(f)\n                    }}/>\n                </Panel>\n            </Collapse>\n            <Tabs defaultActiveKey=\"equity\" animated={false}>\n                <TabPane tab=\"Trades\" key=\"trades\">\n                    <SymbolsAndChart trades={filter.trades} key={'trades'}/>\n                </TabPane>\n                <TabPane tab=\"Factors\" key=\"factors\">\n                    <FactorsPanel trades={filter.trades}/>\n                </TabPane>\n                <TabPane tab=\"Equity\" key=\"equity\">\n                    <EquityPanel trades={filter.trades}/>\n                </TabPane>\n                <TabPane tab=\"Stats\" key=\"stats\">\n                    <StatsPanel trades={filter.trades}/>\n                </TabPane>\n                <TabPane tab=\"By Date\" key=\"by_date\">\n                    <DateStatTable trades={filter.trades} orders={[]}/>\n                </TabPane>\n                <TabPane tab=\"Dummy\" key=\"dummy\">\n                    <DisplayTrade tradeId={\"some\"}/>\n                </TabPane>\n            </Tabs>\n        </>\n    )\n}","/home/ivan/projects/chartpapa/front/src/pages/aggregation/AggregationPage.tsx",[],"/home/ivan/projects/chartpapa/front/src/services/localStorage.ts",["319","320"],"import {Instrument, PortfolioInstrumentsMeta, TagsMetaSummary} from \"../api/models\";\n\nconst LAST_INSTRUMENTS_UPDATE = 'LAST_INSTRUMENTS_UPDATE'\nconst STORED_INSTRUMENTS = 'STORED_INSTRUMENTS'\nconst PORTFOLIO_UPDATE = 'PORTFOLIO_UPDATE'\nconst PORTFOLIO_AVAILABLE_TAGS = 'PORTFOLIO_AVAILABLE_TAGS'\nconst PORTFOLIO_INSTRUMENTS_META = 'PORTFOLIO_INSTRUMENTS_META'\n\n\nexport function getLocalStoredInstruments(): Array<Instrument> | undefined {\n    const stored = localStorage.getItem(STORED_INSTRUMENTS)\n    if (stored !== null && stored !== 'undefined') {\n        return JSON.parse(stored)\n    }\n    return\n}\n\nexport function setLocalStoredInstruments(map: Array<Instrument> | undefined) {\n    localStorage.setItem(STORED_INSTRUMENTS, JSON.stringify(map))\n}\n\nexport interface PortfolioUpdateInfo {\n    orders: number\n    trades: number\n}\n\nexport function getLastStoredPortfolioUpdate(portfolioID: string): PortfolioUpdateInfo | undefined {\n    const stored = localStorage.getItem(`${PORTFOLIO_UPDATE}_${portfolioID}`)\n    if (stored !== null && stored !== 'undefined') {\n        return JSON.parse(stored)\n    }\n    return\n}\n\nexport function getStoredPortfolioInstrumentsMeta(portfolioID: string): PortfolioInstrumentsMeta | undefined {\n    const stored = localStorage.getItem(`${PORTFOLIO_INSTRUMENTS_META}_${portfolioID}`)\n    if (stored !== null && stored !== 'undefined') {\n        return JSON.parse(stored)\n    }\n    return\n}\n\nexport function setStoredPortfolioInstrumentsMeta(portfolioID: string, meta: PortfolioInstrumentsMeta) {\n    localStorage.setItem(`${PORTFOLIO_INSTRUMENTS_META}_${portfolioID}`, JSON.stringify(meta))\n}\n\n\nexport function setStoredPortfolioAvailableTags(portfolioID: string, tags: TagsMetaSummary) {\n    localStorage.setItem(`${PORTFOLIO_INSTRUMENTS_META}_${portfolioID}`, JSON.stringify(tags))\n}","/home/ivan/projects/chartpapa/front/src/services/tradeUtils.ts",["321","322","323","324","325","326","327","328"],"import {all, create} from 'mathjs'\nimport moment from \"moment-timezone\";\nimport {QuantinizeFunction} from \"./quantizationUtils\";\nimport {Order, Side, Trade} from \"../api\"\n\nconst math = create(all, {})!\nlet _ = require('lodash');\n\n\nexport class EquityAndStats {\n    equity: Array<[number, number]>\n    title: string\n\n    constructor(equity: Array<[number, number]>, title: string) {\n        this.equity = equity;\n        this.title = title;\n    }\n}\n\nexport const groupBy = function <T>(trades: Array<T>, extr: (tr: T) => string): { [index: string]: Array<T> } {\n    return _.groupBy(trades, extr);\n};\n\n\nexport const calcStats = (trades: Array<Trade>): Stats => {\n    if (trades.length == 0) {\n        return {\n            avgPnl: 0,\n            avg_percent: 0,\n            biggest_trade: 0,\n            cnt: 0,\n            drawdown: 0,\n            drawdown_percent: 0,\n            lowest_trade: 0,\n            pf: 0,\n            pnl: 0,\n            recovery_factor: 0,\n            run_up: 0,\n            sharpe: 0,\n            sortino: 0,\n            std: 0,\n            median: 0,\n            holdHoursMean: 0\n        }\n    }\n\n    let run_up = 0\n    let max_drawdown = 1000_000_000\n    let max_drawdown_percent = 1000_000_000\n\n    let last_point = 0\n    let last_point_long = 0\n    let last_point_short = 0\n\n    let win_sum = 0\n    let loss_sum = 0\n    let biggest_trade = -1000_000_000\n    let lowest_trade = 1000_000_000\n\n    let pnls: Array<number> = trades.map(it => it.pnl);\n\n\n    pnls.forEach((pnl, idx) => {\n        lowest_trade = math.min!(lowest_trade, pnl)\n        biggest_trade = math.max!(biggest_trade, pnl)\n        if (pnl > 0) {\n            win_sum += pnl\n        } else {\n            loss_sum += pnl\n        }\n\n        if (trades[idx].side === Side.Buy) {\n            last_point_long += pnl\n        } else {\n            last_point_short += pnl\n        }\n\n        last_point += pnl\n\n        if (last_point > run_up) {\n            run_up = last_point\n        }\n\n        let drawdown = last_point - run_up\n\n        if (drawdown < max_drawdown) {\n            max_drawdown = drawdown\n\n            let percent_drawdown = run_up == 0 ? 0 : (last_point - run_up) * 100 / run_up\n\n            if (percent_drawdown < max_drawdown_percent) {\n                max_drawdown_percent = percent_drawdown\n            }\n        }\n    })\n\n    const mean_trade = trades.length > 0 ? (loss_sum + win_sum) / trades.length : 0\n\n    const std = math.std!(pnls, 'unbiased')\n\n    const median = math.median!(pnls)\n\n    let shape = mean_trade / std\n\n    return {\n        cnt: trades.length,\n        std: std,\n        pnl: win_sum + loss_sum,\n        run_up: run_up,\n        drawdown: max_drawdown,\n        drawdown_percent: max_drawdown_percent,\n        sharpe: shape,\n        pf: loss_sum == 0 ? 0 : math.abs!(win_sum / loss_sum),\n        sortino: 0,\n        avgPnl: mean_trade,\n        avg_percent: 0,\n        recovery_factor: 0,\n        biggest_trade: biggest_trade,\n        lowest_trade: lowest_trade,\n        median: median,\n        holdHoursMean: math.mean!(trades.map(it => (it.closeTime - it.openTime) / 1000 / 3600))\n    }\n}\n\nexport interface Stats {\n    cnt: number\n    std: number\n    pnl: number\n    run_up: number\n    drawdown: number\n    drawdown_percent: number\n    sharpe: number\n    pf: number\n    sortino: number\n    avgPnl: number\n    avg_percent: number\n    recovery_factor: number\n    biggest_trade: number\n    lowest_trade: number\n    median: number,\n    holdHoursMean: number\n}\n\nexport function calcEquity(trades: Array<Trade>, byIndex: boolean): Array<[number, number]> {\n    let currentPnl = 0\n    return trades.map((trd, idx) => {\n        currentPnl += trd.pnl\n        return [byIndex ? idx : trd.openTime, currentPnl]\n    });\n}\n\nexport function chunk<T>(arr: Array<T>, chunk: number): Array<Array<T>> {\n    var i, j;\n    const ret = []\n    for (i = 0, j = arr.length; i < j; i += chunk) {\n        ret.push(arr.slice(i, i + chunk))\n    }\n    return ret\n}\n\nfunction getGroupedOrdersInfoForDate(groupedOrders: { [key: string]: Array<Order> }, dt: string): groupedOrdersInfo {\n    let count: number = 0\n    let exposure: number = 0\n    const ordersArr = groupedOrders[dt]\n    if (ordersArr !== undefined) {\n        count = ordersArr.length\n        ordersArr.map(o => {\n            exposure += o.price! * o.qty\n        })\n    }\n\n    return {count, exposure}\n}\n\ninterface groupedOrdersInfo {\n    count: number\n    exposure: number\n}\n\nexport const groupByDate = function (trades: Array<Trade>, orders: Array<Order>): Array<DateStat> {\n\n    const atStart = (ts: number): string => {\n        return moment(ts).format('YYYY-MM-DD')\n    }\n\n    const groupedByCloseTime = _.groupBy(trades, (e: Trade) => {\n        return atStart(e.closeTime)\n    })\n\n    const groupedByOpenTime = _.groupBy(trades, (e: Trade) => {\n        return atStart(e.openTime)\n    })\n\n\n    const ordersByStatus = _.groupBy(orders, (e: Order) => {\n        return e.status.toLowerCase()\n    })\n    const allOrdersByPlaceDate = _.groupBy(orders, (e: Order) => {\n        return atStart(e.placeTime)\n    })\n\n    const filledOrdersByUpdateDate = _.groupBy(ordersByStatus.filled, (e: Order) => {\n        return atStart(e.updateTime)\n    })\n    const canceledOrdersByUpdateDate = _.groupBy(ordersByStatus.canceled, (e: Order) => {\n        return atStart(e.updateTime)\n    })\n\n    const closeDates = Object.keys(groupedByCloseTime)\n    const openDates = Object.keys(groupedByOpenTime)\n\n    const minDate = new Date(Math.min(...openDates.map(e => {\n        return new Date(e).getTime()\n    })))\n\n    const maxDate = new Date(Math.max(...closeDates.map(e => {\n        return new Date(e).getTime()\n    })))\n\n    let curDate = minDate\n\n    let totalOpenPositions: number = 0\n    let activeOrders: number = 0\n    let positionExposure: number = 0\n    let eodOrdersExposure: number = 0\n    let equity: number = 0\n\n    let byDate: Array<DateStat> = []\n\n    while (curDate <= maxDate) {\n        const dt: string = moment(curDate).format('YYYY-MM-DD')\n        let newOpenPositions: number = 0\n        let closedPnL: number = 0\n        let closedPositions: number = 0\n\n\n        const openPositionsArr = groupedByOpenTime[dt]\n        openPositionsArr?.forEach((p: Trade) => {\n            newOpenPositions += 1\n            positionExposure += p.openPrice * p.qty\n        })\n\n\n        const closedPositionsArr = groupedByCloseTime[dt]\n        closedPositionsArr?.forEach((p: Trade) => {\n            positionExposure -= Math.round(p.openPrice * p.qty)\n            closedPnL += p.pnl\n            closedPositions += 1\n        })\n\n\n        const executedOrdersInfo = getGroupedOrdersInfoForDate(filledOrdersByUpdateDate, dt)\n        const canceledOrdersInfo = getGroupedOrdersInfoForDate(canceledOrdersByUpdateDate, dt)\n        const placedOrdersInfo = getGroupedOrdersInfoForDate(allOrdersByPlaceDate, dt)\n\n        totalOpenPositions += newOpenPositions - closedPositions\n        equity += closedPnL\n        eodOrdersExposure += placedOrdersInfo.exposure - canceledOrdersInfo.exposure - executedOrdersInfo.exposure\n        activeOrders += placedOrdersInfo.count - canceledOrdersInfo.count - executedOrdersInfo.count\n\n        const date = new Date(dt)\n        byDate.push({\n            date,\n            equity,\n            totalOpenPositions,\n            newOpenPositions,\n            closedPositions,\n            positionExposure,\n            eodOrdersExposure,\n            totalExposure: eodOrdersExposure + positionExposure,\n            placedOrders: placedOrdersInfo.count,\n            activeOrders,\n            executedOrders: executedOrdersInfo.count,\n            canceledOrders: executedOrdersInfo.count,\n            closedPnL,\n        })\n\n        curDate.setDate(curDate.getDate() + 1);\n    }\n\n\n    return byDate\n};\n\n\nexport interface DateStat {\n    date: Date\n    equity: number\n    totalOpenPositions: number\n    newOpenPositions: number\n    closedPositions: number\n    positionExposure: number\n    eodOrdersExposure: number\n    totalExposure: number\n    placedOrders: number\n    activeOrders: number\n    executedOrders: number\n    canceledOrders: number\n    closedPnL: number\n}\n\nexport interface DiscreteAggregationTuple {\n    field: string\n    value: any\n}\n\nexport interface ContAggregationTuple extends DiscreteAggregationTuple{\n    func: QuantinizeFunction\n}\n\nexport interface AggregationConditions {\n    discreteTags: Array<DiscreteAggregationTuple>\n    continuousTags: Array<ContAggregationTuple>\n    discreteMeta: Array<DiscreteAggregationTuple>\n    continuousMeta: Array<ContAggregationTuple>\n    tradeCond: Array<DiscreteAggregationTuple>\n}\n\nexport interface AggregationResult extends Stats {\n    conditions: AggregationConditions\n}\n\n\n\n\n\n","/home/ivan/projects/chartpapa/front/src/components/equity/EquityPanel.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/equity/StatsPanel.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FactorsPanel.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FilterComp.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/tables/ByDateResults.tsx",["329"],"import React from 'react';\nimport 'antd/dist/antd.css';\n\nimport {Empty, Table} from 'antd';\nimport {DateStat, groupByDate} from \"../../services/tradeUtils\";\nimport {ColumnType} from \"antd/es/table\";\nimport {Order, Trade} from \"../../api/models\";\nimport {getRenderByValue} from \"./utils\";\n\n\nexport const DateStatTable = (props: { trades: Array<Trade>, orders: Array<Order> }) => {\n    const {trades, orders} = props;\n\n    const stat = groupByDate(trades, orders).filter(it => it.newOpenPositions !== 0 || it.closedPositions !== 0)\n\n    if (stat === undefined || stat.length === 0) {\n        return <Empty/>\n    }\n    const columns: ColumnType<DateStat>[] = []\n    Object.keys(stat[0]).map(p => {\n        columns.push({\n            title: p.charAt(0).toUpperCase() + p.slice(1),\n            dataIndex: p,\n            key: p,\n            render: getRenderByValue(p)\n        })\n    })\n\n    return <Table<DateStat>\n        columns={columns} dataSource={stat}\n        pagination={{pageSize: 150}} scroll={{y: 440}} size=\"small\"\n    />\n}\n\n\n","/home/ivan/projects/chartpapa/front/src/components/tables/SymbolResults.tsx",[],"/home/ivan/projects/chartpapa/front/src/templates/aggregate-and-filter/AggregateAndFilterTemplate.tsx",["330"],"import React, {Fragment, useEffect, useState} from \"react\";\nimport {Col, Row} from \"antd\"\nimport {AggregationTable} from \"../../components/tables/AggregationTable\";\nimport {FilterView} from \"../../components/filter-view/FilterView\";\nimport {AggregationForm} from \"../../components/forms/AggregationForm\";\nimport {AggregationResult,} from \"../../services/tradeUtils\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState} from \"../../reducers/reducers\";\nimport {Trade} from \"../../api/models\";\nimport {filterTradesByAggregationResult} from \"../../services/aggregationUtils\";\n\nexport const AggregateAndFilterTemplate = (props: {\n    withForm: boolean,\n    aggFunction?: (trades: Array<Trade>) => Array<AggregationResult>, hasCandlestick?: boolean\n}) => {\n\n    const {withForm, aggFunction, hasCandlestick} = props\n\n    const {trades, instrumentsMap} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const [filteredTrades, setFilteredTrades] = useState<Array<Trade>>([])\n    const [aggData, setAggData] = useState<Array<AggregationResult>>([])\n\n\n    const applyFilter = (aggregation: AggregationResult) => {\n        setFilteredTrades(filterTradesByAggregationResult(trades, aggregation, instrumentsMap))\n    }\n\n    const setAggDataFromForm = (results: Array<AggregationResult>) => {\n        setAggData(results)\n    }\n\n    const aggForm = withForm ? (\n        <Row><Col span={24}> <AggregationForm applyResults={setAggDataFromForm}/> </Col></Row>) : null\n    let initError = false;\n\n    useEffect(() => {\n        if (withForm) {\n            return\n        }\n        if (aggFunction === undefined) {\n            initError = true\n            return\n        }\n        const results = aggFunction(trades)\n        setAggDataFromForm(results)\n\n    }, [withForm, aggFunction, trades])\n\n    if (initError) {\n        return <h3>No agg function provided</h3>\n    }\n\n    return (\n        <Fragment>\n            {aggForm}\n            <Row>\n                <Col span={24}>\n                    <AggregationTable onClick={applyFilter} data={aggData}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={24}>\n                    <FilterView trades={filteredTrades} hasCandlestick={hasCandlestick}/>\n                </Col>\n            </Row>\n        </Fragment>\n    )\n}","/home/ivan/projects/chartpapa/front/src/api/index.ts",[],"/home/ivan/projects/chartpapa/front/src/api/apis/index.ts",[],"/home/ivan/projects/chartpapa/front/src/services/aggregationUtils.ts",[],"/home/ivan/projects/chartpapa/front/src/components/tables/utils.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FactorTab.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/FlatFactorsPage.tsx",["331"],"import {useMappedState} from \"redux-react-hook\";\nimport {IMainState} from \"../../reducers/reducers\";\nimport {default as React, useEffect, useState} from \"react\";\nimport {TagsMetaSummary, Trade} from \"../../api/models\";\nimport {CategoryFactorWidget} from \"./CategoryFactorWidget\";\nimport {portfoliosApi} from \"../../services/api/services\";\nimport {Tabs} from \"antd\";\nimport {Stats} from \"../../services/tradeUtils\";\nimport {PieWidget} from \"./PieWidget\";\nimport moment from \"moment-timezone\";\n\nlet _ = require('lodash');\n\n\nconst {TabPane} = Tabs;\n\nconst BUCKETS_NUM = 10\n\nconst getQuantileFunction = (min: number, max: number, valExtract: (tr: Trade) => number): (tr: Trade) => string => {\n    const range = max - min; // to allow to avoid last bucket with single metric\n    return (tr: Trade) => {\n        const val = valExtract(tr)\n        return `${((val - min) / range * BUCKETS_NUM).toFixed(0)}Q`\n    }\n}\n\nconst getCats = (min: number, max: number): Array<CatDescription> => {\n    return Array.from(Array(BUCKETS_NUM + 1).keys()).map(it => {\n        return {\n            key: `${it}Q`,\n            description: `${(min + (max - min) * it / BUCKETS_NUM).toFixed(2)} - ${(min + (max - min) * (it + 1) / BUCKETS_NUM).toFixed(2)}`\n        }\n    })\n}\n\n\nexport const ChartTypes = ['Pie', 'Simple']\n\nexport interface FactorConf {\n    metric: keyof Stats,\n    chartType: string\n}\n\nexport const defaultFactorConf: FactorConf = {metric: 'pnl', chartType: 'Simple'}\n\nexport const sortCats = (cats: Array<string>): Array<string> => {\n    return cats\n        .map(it => parseInt(it)).sort((a, b) => a - b).map(it => it.toString())\n}\n\nexport const FlatFactorsComp = (props: { trades: Array<Trade>, conf: FactorConf }) => {\n\n    const {trades, conf} = props\n\n    const metric = conf.metric\n\n    const {portfolioID, availableInstrumentsMeta, instrumentsMap} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const [metas, setMeta] = useState<TagsMetaSummary>()\n\n    useEffect(() => {\n        if (!metas) {\n            portfoliosApi.portfoliosAvailableTagsList({portfolio: portfolioID!}).then((pf) => {\n                setMeta(pf)\n            })\n        }\n    })\n\n    if (!metas) {\n        return <div/>\n    }\n\n\n    if (metas.discreteMetas.length === 0 && metas.continuousMetas.length === 0) {\n        return <div>No factors</div>\n    }\n\n    const defaultKey = metas.discreteMetas.length !== 0 ? metas.discreteMetas[0].name : metas.continuousMetas[0].name;\n\n\n    const cont: Array<FactorWidgetProps> = metas.continuousMetas.map(meta => {\n\n        return {\n            trades: trades,\n            title: meta.name,\n            metric: metric,\n            groupFunc: getQuantileFunction(meta.min, meta.max, it => it.continuousTags![meta.name]),\n            categories: getCats(meta.min, meta.max)\n        }\n    });\n\n    const descr: Array<FactorWidgetProps> = metas.discreteMetas.map(meta => {\n        return {\n            trades: trades,\n            title: meta.name,\n            metric: metric,\n            groupFunc: (it: Trade) => {\n                return it.discreteTags![meta.name]\n            },\n            categories: sortCats(meta.values).map(it => {\n                return {\n                    key: it,\n                    description: it\n                }\n            })\n        }\n    })\n\n    const discrInstr = availableInstrumentsMeta?.discreteMetas.map(meta => {\n        return {\n            trades: trades,\n            title: meta.name,\n            metric: metric,\n            groupFunc: (it: Trade) => {\n                return instrumentsMap!![it.symbol]!!.metaDiscrete!![meta.name]\n            },\n            categories: meta.values.map(it => {\n                return {\n                    key: it,\n                    description: it\n                }\n            })\n        }\n    }) || []\n\n    const contInstr = availableInstrumentsMeta?.continuousMetas.map(meta => {\n        return {\n            trades: trades,\n            title: meta.name,\n            metric: metric,\n            groupFunc: getQuantileFunction(meta.min, meta.max, tr => {\n                try {\n                    return instrumentsMap!![tr.symbol]!!.metaContinuous!![meta.name]\n                } catch {\n                    console.log(meta)\n                    return 0\n                }\n\n            }),\n            categories: getCats(meta.min, meta.max)\n        }\n    }) || []\n\n\n    const allmetas = [...cont, ...descr, ...discrInstr, ...contInstr,\n        {...hourProp, metric, trades},\n        {...weekDayProp, metric, trades},\n        {...dateProp, metric, trades}\n    ]\n\n\n    return <Tabs defaultActiveKey={defaultKey} animated={false}>\n        {\n            allmetas.map(meta => {\n                return <TabPane tab={meta.title} key={meta.title}>\n                    <UniversalWidget trades={trades}\n                                     title={meta.title}\n                                     metric={meta.metric}\n                                     groupFunc={meta.groupFunc}\n                                     categories={meta.categories} chartType={conf.chartType}/>\n                </TabPane>\n            })\n        }\n    </Tabs>\n};\n\nexport interface CatDescription {\n    key: string,\n    description: string\n}\n\nconst hourProp = {\n    title: 'Hour Stat',\n    metric: 'pnl',\n    groupFunc: (tr: Trade) => {\n        return `${moment(tr.openTime).hour()}`\n    },\n    categories: Array.from(Array(25).keys()).map(it => {\n        return {\n            key: '' + it,\n            description: '' + it\n        }\n    })\n}\n\nconst weekDayProp = {\n    title: 'Week Day Stat',\n    metric: 'pnl',\n    groupFunc: (tr: Trade) => {\n        return `${moment(tr.openTime).day()}`\n    },\n    categories: Array.from(Array(8).keys()).map(it => {\n        return {\n            key: '' + it,\n            description: '' + it\n        }\n    })\n}\n\nconst dateProp = {\n    title: 'Date Stat',\n    metric: 'pnl',\n    groupFunc: (tr: Trade) => {\n        return `${moment(tr.openTime).date()}`\n    },\n    categories: Array.from(Array(32).keys()).map(it => {\n        return {\n            key: '' + it,\n            description: '' + it\n        }\n    })\n}\n\n\ninterface FactorWidgetProps {\n    trades: Array<Trade>,\n    title: string,\n    metric: string,\n    groupFunc: (tr: Trade) => string,\n    categories: Array<CatDescription>\n}\n\nconst UniversalWidget = (props: (FactorWidgetProps & { chartType: string })) => {\n    if (props.chartType === 'Simple') {\n        return <CategoryFactorWidget {...props}/>\n    }\n    return <PieWidget {...props}/>\n}\n","/home/ivan/projects/chartpapa/front/src/components/candlestick/CandlestickHigh.tsx",["332","333","334"],"import React, {useEffect, useMemo, useState} from 'react';\n\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport {Trade, Side} from \"../../api/models\";\nimport {candlesApi} from \"../../services/api/services\";\n// @ts-ignore\nimport {CandlesApi} from \"../../api/apis\";\nimport {Configuration} from \"../../api\";\nimport {AnnotationsShapesOptions} from \"highcharts\";\nimport moment from \"moment-timezone\";\n\nrequire('highcharts/modules/annotations')(Highcharts)\n\nconst options = {\n    rangeSelector: {\n        selected: 1\n    },\n\n    title: {\n        text: \"AAPL Historical\"\n    },\n\n    yAxis: [\n        {\n            labels: {\n                align: \"right\",\n                x: -3\n            },\n            title: {\n                text: \"OHLC\"\n            },\n            height: \"100%\",\n            lineWidth: 2,\n            resize: {\n                enabled: true\n            }\n        }\n    ],\n\n    tooltip: {\n        split: true\n    },\n    chart: {\n        zoomType: 'x'\n    },\n    series: [\n        {\n            type: \"ohlc\",\n            name: \"AAPL\",\n            marker: {\n                enabled: false\n            }\n        }\n    ],\n    annotations: [] as Array<any>\n};\n\n\n\nexport const fetchTicker = (ticker: string, minTs: number, maxTs: number): Promise<Array<[number, number, number, number, number]>> => {\n    return candlesApi.candlesRead({symbol: ticker, timeframe: 'Min10', fromTs: minTs, toTs: maxTs}).then(it => {\n        return it.map(candle => {\n            return [candle.datetime, candle.open, candle.high, candle.low, candle.close]\n        })\n    })\n}\n\n\nconst makeShape = (trade: Trade): AnnotationsShapesOptions => {\n    return {\n        fill: 'none',\n        stroke: trade.side === Side.Sell ? 'red' : 'green',\n        strokeWidth: 3,\n        dashStyle: 'Dot',\n        type: 'path',\n        points: [{\n            x: trade.openTime,\n            y: trade.openPrice,\n            xAxis: 0,\n            yAxis: 0\n        },\n            {\n                x: trade.closeTime,\n                y: trade.closePrice,\n                xAxis: 0,\n                yAxis: 0\n            }],\n        markerEnd: 'arrow',\n        markerStart: 'circle'\n    }\n}\n\nexport const CandlestickHigh = (props: { trades: Array<Trade>, ticker: string }) => {\n\n    const [ohlc, setOhlc] = useState([] as Array<[number, number, number, number, number]>)\n\n    const [minTs, maxTs] = useMemo(() => {\n\n        let minTs = props.trades[0]?.openTime || 0\n        let maxTs = props.trades[props.trades.length - 1]?.closeTime || 0\n\n        props.trades.forEach((trd) => {\n            maxTs = Math.max(trd.closeTime, maxTs)\n            minTs = Math.min(trd.openTime, minTs)\n        })\n\n        return [minTs, maxTs]\n\n    }, [props.trades])\n\n\n    if (ohlc && ohlc.length > 0 && props.trades && props.trades.length > 0) {\n\n        console.log('first', moment(props.trades[0].openTime))\n        console.log('last', moment(props.trades[props.trades.length - 1].closeTime))\n\n        console.log('first oh', moment(ohlc[0][0]))\n        console.log('last oh', moment(ohlc[ohlc.length - 1][0]))\n    }\n\n\n    useEffect(() => {\n        console.log(\"requesting\", moment(minTs))\n        fetchTicker(props.ticker, minTs, maxTs).then(dt => {\n            setOhlc(dt)\n        })\n    }, [props.ticker]);\n\n    const ser = {\n        type: \"ohlc\",\n        name: props.ticker,\n        marker: {\n            enabled: false\n        },\n        data: ohlc\n    }\n\n    const opts = {\n        ...options,\n\n        title: {\n            text: props.ticker\n        },\n        series: [ser], annotations: [\n            {shapes: props.trades.map(trd => makeShape(trd))}\n        ]\n    };\n\n    return (\n        <HighchartsReact\n            highcharts={Highcharts}\n            constructorType={\"stockChart\"}\n            options={opts}/>\n    );\n}","/home/ivan/projects/chartpapa/front/src/components/perfromance/StatWidget.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/forms/AggregationForm.tsx",["335","336"],"import React, {Fragment, useEffect, useState} from \"react\";\nimport {AggregationResult} from \"../../services/tradeUtils\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {IMainState} from \"../../reducers/reducers\";\nimport {Button, Col, Divider, Empty, Form, InputNumber, Radio, Row, Select} from \"antd\"\nimport {DownOutlined, UpOutlined} from '@ant-design/icons'\nimport \"./style.css\"\nimport {aggregateTradesByParams} from \"../../services/aggregationUtils\";\n\nconst {Option} = Select;\n\nconst formItemLayout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n}\n\n\nexport const AggregationForm = (props: { applyResults: (results: Array<AggregationResult>) => void }) => {\n    const {availableTags, trades, availableInstrumentsMeta} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const {instrumentsMap} = useMappedState((state: IMainState) => {\n        return state\n    })\n\n    const [tradesTagsOptions, setTradesTagsOptions] = useState<Array<any>>([])\n    const [tradesTagsOptionsCont, setTradesTagsOptionsCont] = useState<Array<any>>([])\n    const [instrumentsMetaOptions, setInstrumentsMetaOptions] = useState<Array<any>>([])\n    const [instrumentsMetaOptionsCont, setInstrumentsMetaOptionsCont] = useState<Array<any>>([])\n    const [collapse, setCollapse] = useState(false);\n    const [form] = Form.useForm();\n\n\n    useEffect(() => {\n        if (availableTags === undefined) {\n            setTradesTagsOptions([])\n            setTradesTagsOptionsCont([])\n            return\n        }\n        const newOptions = availableTags.discreteMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setTradesTagsOptions(newOptions)\n        const newOptionsCont = availableTags.continuousMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setTradesTagsOptionsCont(newOptionsCont)\n    }, [availableTags])\n\n\n    useEffect(() => {\n        if (availableInstrumentsMeta === undefined) {\n            setInstrumentsMetaOptions([])\n            return\n        }\n        const newOptions = availableInstrumentsMeta.discreteMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setInstrumentsMetaOptions(newOptions)\n\n        const newOptionsCont = availableInstrumentsMeta.continuousMetas.map(m => {\n            return (<Option value={m.name}>{m.name}</Option>)\n        })\n        setInstrumentsMetaOptionsCont(newOptionsCont)\n    }, [availableInstrumentsMeta])\n\n    if (availableTags === undefined) {\n        return <Empty/>\n    }\n\n    const onFinish = (values: any) => {\n        setCollapse(true)\n        props.applyResults(aggregateTradesByParams(values, trades, instrumentsMap))\n    }\n    const inputFields = collapse ? null : (\n        <Fragment>\n            <Row gutter={24}>\n                <Col span={12} key='discrete_tags'>\n                    <Form.Item\n                        name=\"discrete_tags\"\n                        label=\"Tags\"\n                        rules={[{\n                            required: false,\n                            message: 'Select portfolio trades tag fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select tags..\">\n                            {tradesTagsOptions}\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span={12} key='continuous_tags'>\n                    <Form.Item\n                        name=\"continuous_tags\"\n                        label=\"Tags Continuous\"\n                        rules={[{\n                            required: false,\n                            message: 'Select portfolio trades tag fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select tags..\">\n                            {tradesTagsOptionsCont}\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row gutter={24}>\n                <Col span={12} key='discrete_metas'>\n                    <Form.Item\n                        name=\"discrete_metas\"\n                        label=\"Meta\"\n                        rules={[{\n                            required: false,\n                            message: 'Select fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select meta..\">\n                            {instrumentsMetaOptions}\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span={12} key='continuous_metas'>\n                    <Form.Item\n                        name=\"continuous_metas\"\n                        label=\"Meta Continuous\"\n                        rules={[{\n                            required: false,\n                            message: 'Select fields you want to use for aggregation',\n                            type: 'array',\n                        },]}>\n                        <Select mode=\"multiple\" placeholder=\"Select meta..\">\n                            {instrumentsMetaOptionsCont}\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Divider/>\n                <Col span={12} key=\"agg_method\">\n                    <Form.Item name=\"agg_method\" label=\"Method\">\n                        <Radio.Group defaultValue=\"Quantile\">\n                            <Radio value=\"Quantile\">Quantile</Radio>\n                            <Radio value=\"Range\">Range</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                </Col>\n                <Col span={12}>\n                    <Form.Item label=\"Split groups\" name='split_groups'>\n                        <InputNumber min={5} max={50} step={5}/>\n                    </Form.Item>\n                </Col>\n            </Row>\n        </Fragment>\n    )\n    const buttons = !collapse ? (\n        <Row>\n            <Col span={24} style={{textAlign: 'right'}} key='agg_submit_group'>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Aggregate\n                </Button>\n                <Button style={{margin: '0 8px'}}\n                        onClick={() => {\n                            form.resetFields();\n                        }}>\n                    Clear\n                </Button>\n                <a style={{fontSize: 14}}\n                   onClick={() => {\n                       setCollapse(!collapse);\n                   }}>{!collapse ? <UpOutlined/> : <DownOutlined/>} Collapse\n                </a>\n            </Col>\n        </Row>) : (\n        <Row>\n            <Col span={24} style={{textAlign: 'right'}} key='agg_submit_group'>\n                <Button type=\"link\" style={{fontSize: 14}}\n                   onClick={() => {\n                       setCollapse(!collapse);\n                   }}>{!collapse ? <UpOutlined/> : <DownOutlined/>} Show form\n                </Button>\n            </Col>\n        </Row>\n    )\n    return (\n        <Form name=\"validate_other\"\n              className=\"ant-advanced-search-form\"\n              {...formItemLayout}\n              form={form}\n              initialValues={{\n                  [\"split_groups\"]: 10\n              }}\n              onFinish={onFinish}>\n            {inputFields}\n            {buttons}\n        </Form>\n    )\n}\n\n\n","/home/ivan/projects/chartpapa/front/src/components/tables/AggregationTable.tsx",["337","338","339","340","341"],"import React, {useEffect, useState} from \"react\"\nimport {AggregationResult, Stats} from \"../../services/tradeUtils\";\nimport {Collapse, Empty, Table} from \"antd\";\n\nimport {ColumnsType} from \"antd/es/table\";\nimport {getRenderByValue} from \"./utils\";\nimport 'antd/dist/antd.css';\nimport './style.css'\nimport {CompareFn} from \"antd/es/table/interface\";\n\nconst {Panel} = Collapse;\n\n\nconst getSorter = (fld: keyof Stats): { compare: CompareFn<Stats>, multiple: number } => {\n    return {\n        compare: (a: Stats, b: Stats) => a[fld] - b[fld],\n        multiple: 1\n    }\n};\n\n\nfunction constructTitle(selectedResult: any) {\n    let title = selectedResult?.conditions ? \"Results for conditions: \" : \"\"\n\n    Object.keys(selectedResult?.conditions || {}).map(e => {\n        for (const cond of selectedResult.conditions[e]) {\n            title += `${cond.field}=${cond.value} `\n        }\n    })\n    return title;\n}\n\nexport const AggregationTable = (props: { data: Array<AggregationResult>, onClick: (aggregation: AggregationResult) => void }) => {\n    const {data, onClick} = props\n    const [selectedResult, setSelectedResult] = useState<any>(undefined)\n    const [columns, setColumns] = useState<ColumnsType<AggregationResult>>()\n    const [formattedData, setFormattedData] = useState<Array<any>>([])\n    const [selectedIndex, setSelectedIndex] = useState<number>()\n\n    const selectRow = (record: AggregationResult, index: any) => {\n        setSelectedIndex(index)\n        onClick(record)\n        setSelectedResult(record)\n    };\n\n    const setRowClassName = (record: AggregationResult, index: number) => {\n        return index === selectedIndex ? 'clickRowStyl' : '';\n    };\n\n    useEffect(() => {\n        if (data === undefined || data.length === 0) {\n            setColumns([])\n            setFormattedData([])\n            return\n        }\n        const newCols: ColumnsType<AggregationResult> = []\n        const sample = data[0]\n\n        Object.keys(sample).map(s => {\n            if (s !== 'conditions') {\n                newCols.push({\n                    title: s,\n                    dataIndex: s,\n                    render: getRenderByValue(s),\n                    sorter: getSorter(s as keyof Stats)\n\n                });\n                return\n            }\n            // conditions field\n            Object.keys(sample[s]).map(k => {\n                // @ts-ignore\n                for (const c of sample[s][k]) {\n                    newCols.push({\n                        title: c.field,\n                        dataIndex: c.field,\n                        render: getRenderByValue(s)\n                    })\n                }\n            })\n        })\n        setColumns(newCols)\n\n        // Flat results\n        const newFormattedData: Array<AggregationResult> = []\n        for (const entry of data) {\n            const formattedEntry = {...entry}\n            Object.keys(entry.conditions).map(k => {\n                // @ts-ignore\n                for (const cond of entry.conditions[k]) {\n                    // @ts-ignore\n                    formattedEntry[cond.field] = cond.value\n                }\n            })\n            newFormattedData.push(formattedEntry)\n        }\n        setFormattedData(newFormattedData)\n    }, [data])\n\n    if (data === undefined || data.length === 0) {\n        return <Empty/>\n    }\n    let title = constructTitle(selectedResult);\n\n    return <Collapse defaultActiveKey={['1']}>\n        <Panel header={title} key=\"1\">\n            <Table\n                columns={columns}\n                dataSource={formattedData}\n                size=\"small\"\n                style={{cursor: \"pointer\"}}\n                onRow={(record, index) => ({\n                    onClick: () => {\n                        selectRow(record, index);\n                    },\n                })}\n                rowClassName={setRowClassName}\n            />\n        </Panel>\n    </Collapse>\n}","/home/ivan/projects/chartpapa/front/src/components/equity/DisplaySettingsComp.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/filter-view/FilterView.tsx",[],"/home/ivan/projects/chartpapa/front/src/api/runtime.ts",[],"/home/ivan/projects/chartpapa/front/src/api/apis/DefaultApi.ts",[],"/home/ivan/projects/chartpapa/front/src/services/quantizationUtils.ts",["342"],"export enum QuantinizeAggType {\n    Quantile,\n    Range\n}\n\nexport type QuantinizeFunction = (val: number) => string\n\nfunction sortNumber(a: number, b: number) {\n    return a - b\n}\n\nexport function GetContQuantizationFunc(valuesArr: Array<number>, numGroups: number, qType: QuantinizeAggType): QuantinizeFunction {\n    let splitPointsArray: Array<number> = []\n    if (qType === QuantinizeAggType.Quantile) {\n        splitPointsArray = getQuantiles(valuesArr, numGroups)\n    } else {\n        splitPointsArray = getRanges(valuesArr, numGroups)\n    }\n    splitPointsArray.sort(sortNumber)\n\n    return (val: number): string => {\n        let lowerBand = splitPointsArray[0]\n        for (const p of splitPointsArray) {\n            if (val <= p) {\n                return getStringValueFromRange(lowerBand, p)\n            }\n            lowerBand = p\n        }\n\n        return `${getStringByValue(lowerBand)}-inf`\n    }\n}\n\nfunction quantile(array: Array<number>, percentile: number): number {\n    let index = percentile / 100.0 * (array.length - 1)\n    if (Math.floor(index) == index) {\n        return array[index]\n    } else {\n        const i = Math.floor(index)\n        const fraction = index - i\n        return array[i] + (array[i + 1] - array[i]) * fraction\n    }\n}\n\nfunction getQArrayFromQNumber(numQuantiles: number): Array<number> {\n    const qStep = 100.0 / numQuantiles\n    console.log(qStep)\n    const qBlocks: Array<number> = []\n    let lastQ = 0\n    while (true) {\n        if (lastQ >= 100) {\n            break\n        }\n        lastQ += qStep\n        lastQ = Math.min(lastQ, 100)\n        if (100 - lastQ < 0.5 * qStep) {\n            qBlocks.push(100)\n            break\n        }\n        qBlocks.push(lastQ)\n    }\n    return qBlocks\n}\n\nfunction getQuantiles(array: Array<number>, numQuantiles: number): Array<number> {\n    array.sort(sortNumber)\n    const qArray = getQArrayFromQNumber(numQuantiles)\n    const quantilesValues: Array<number> = []\n    for (const q of qArray) {\n        quantilesValues.push(quantile(array, q))\n    }\n    return quantilesValues\n}\n\nfunction getRanges(valuesArr: Array<number>, groups: number): Array<number> {\n    valuesArr.sort(sortNumber)\n    const min = valuesArr[0]\n    const max = valuesArr[valuesArr.length - 1]\n    const rStep = (max - min) / groups\n    const rBlocks: Array<number> = []\n    let lastQ = min\n    while (true) {\n        if (lastQ >= max) {\n            break\n        }\n        lastQ += rStep\n        lastQ = Math.min(lastQ, max)\n        if (max - lastQ < 0.5 * rStep) {\n            rBlocks.push(max)\n            break\n        }\n        rBlocks.push(lastQ)\n    }\n    return rBlocks\n}\n\n\nfunction getStringValueFromRange(p1: number, p2: number): string {\n    return `${getStringByValue(p1)}-${getStringByValue(p2)}`\n}\n\nfunction getStringByValue(val: number): string {\n    const absVal = Math.abs(val)\n    if (absVal < 0.2) {\n        return `${val.toFixed(3)}`\n    }\n    if (absVal < 1) {\n        return `${val.toFixed(2)}`\n    }\n\n    if (absVal < 100) {\n        return `${Math.round(val)}`\n    }\n\n    if (absVal < 1000) {\n        return `${Math.round(val / 100) * 100}`\n    }\n    if (absVal < 10000) {\n        return `${Math.round(val / 500) * 500}`\n    }\n    return `${Math.round(val / 1000)}K`\n}\n\n\n\n\n\n","/home/ivan/projects/chartpapa/front/src/components/factors/PieWidget.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/factors/CategoryFactorWidget.tsx",[],"/home/ivan/projects/chartpapa/front/src/components/tables/TradesAndOrders.tsx",[],"/home/ivan/projects/chartpapa/front/src/api/models/index.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Trade.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/TagsMetaSummary.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Side.ts",[],"/home/ivan/projects/chartpapa/front/src/components/tables/TradesTable.tsx",["343"],"import React, {useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\n\nimport {Table} from 'antd';\nimport {Trade} from \"../../api/models\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {getRenderByValue} from \"./utils\";\n\n\nexport const TradesTable = (props: { trades: Array<Trade>, onRow: (t: Trade) => void }) => {\n    const {trades} = props;\n\n    const [tradeId, setTradeId] = useState('')\n    const [columns, setColumns] = useState<ColumnsType<Trade>>()\n\n    useEffect(() => {\n        if (trades === undefined || trades.length === 0) {\n            setColumns([])\n            return\n        }\n        const sample = trades[0]\n        const newCols: ColumnsType<Trade> = []\n\n        Object.keys(sample).map(s => {\n            newCols.push({\n                title: s,\n                dataIndex: s,\n                render: getRenderByValue(s)\n            })\n        })\n        setColumns(newCols)\n    }, [trades])\n\n\n    const getRowClassName = (record: Trade) => {\n        return record.tradeId === tradeId ? 'clickRowStyl' : '';\n    };\n\n    return <Table<Trade>\n        columns={columns} dataSource={trades}\n        pagination={{pageSize: 50}} scroll={{y: 240}} size=\"small\"\n        rowClassName={getRowClassName}\n\n        onRow={(record, index) => ({\n            onClick: (event) => {\n                setTradeId(record.tradeId)\n                props.onRow(record)\n            }\n        })}\n    />\n}\n\n\n","/home/ivan/projects/chartpapa/front/src/components/tables/OrdersTable.tsx",["344","345"],"import React, {useEffect, useMemo, useState} from 'react';\nimport 'antd/dist/antd.css';\n\nimport {Table} from 'antd';\nimport {Order} from \"../../api/models\";\nimport {ColumnsType} from 'antd/es/table';\nimport {IMainState} from \"../../reducers/reducers\";\nimport {useMappedState} from \"redux-react-hook\";\nimport {getRenderByValue} from \"./utils\";\n\n\nexport const OrderComp = (props: { tradeId: string }) => {\n\n\n    let allOrders = useMappedState((state: IMainState) => {\n        return state.orders\n    });\n\n    const orders = useMemo(() => {\n        return allOrders.filter(it => it.tradeId === props.tradeId)\n    }, [props.tradeId])\n\n    return <OrdersTable orders={orders}/>\n}\n\n\nexport const OrdersTable = (props: { orders: Array<Order> }) => {\n    const {orders} = props;\n    const [columns, setColumns] = useState<ColumnsType<Order>>()\n    useEffect(() => {\n        if (orders === undefined || orders.length === 0) {\n            setColumns([])\n            return\n        }\n        const sample = orders[0]\n        const newCols: ColumnsType<Order> = []\n\n        Object.keys(sample).map(s => {\n            newCols.push({\n                title: s,\n                dataIndex: s,\n                render: getRenderByValue(s)\n            })\n        })\n        setColumns(newCols)\n    }, [orders])\n\n    return <Table<Order> columns={columns}\n                         dataSource={orders}\n                         pagination={\n                             {\n                                 pageSize: 50\n                             }\n                         }\n                         scroll={\n                             {\n                                 y: 240\n                             }\n                         }\n                         size=\"small\"/>\n}","/home/ivan/projects/chartpapa/front/src/api/models/PortfolioInstrumentsMeta.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Portfolio.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/OrderStatus.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Instrument.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/OrderOrderType.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/DiscreteMeta.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Order.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/ContinuousMeta.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/Candle.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HChart.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HLabel.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HAnnotation.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HMarker.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HAxis.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HLegend.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HNavigator.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HOptions.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HPoint.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HRangeSelector.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HScrollbar.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HSeries.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HShape.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HStyle.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/HTitle.ts",[],"/home/ivan/projects/chartpapa/front/src/api/models/OrderSide.ts",[],"/home/ivan/projects/chartpapa/front/src/components/candlestick/DisplayTrade.tsx",["346"],{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","severity":1,"message":"352","line":25,"column":8,"nodeType":"353","endLine":25,"endColumn":10,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":3,"column":5,"nodeType":"357","messageId":"358","endLine":3,"endColumn":6},{"ruleId":"355","severity":1,"message":"359","line":6,"column":19,"nodeType":"357","messageId":"358","endLine":6,"endColumn":29},{"ruleId":"351","severity":1,"message":"360","line":87,"column":8,"nodeType":"353","endLine":87,"endColumn":21,"suggestions":"361"},{"ruleId":"351","severity":1,"message":"352","line":97,"column":8,"nodeType":"353","endLine":97,"endColumn":10,"suggestions":"362"},{"ruleId":"363","severity":1,"message":"364","line":104,"column":35,"nodeType":"365","messageId":"366","endLine":104,"endColumn":37},{"ruleId":"355","severity":1,"message":"356","line":17,"column":5,"nodeType":"357","messageId":"358","endLine":17,"endColumn":6},{"ruleId":"355","severity":1,"message":"367","line":3,"column":7,"nodeType":"357","messageId":"358","endLine":3,"endColumn":30},{"ruleId":"355","severity":1,"message":"368","line":6,"column":7,"nodeType":"357","messageId":"358","endLine":6,"endColumn":31},{"ruleId":"369","severity":1,"message":"370","line":26,"column":23,"nodeType":"371","messageId":"372","endLine":26,"endColumn":25},{"ruleId":"355","severity":1,"message":"373","line":73,"column":13,"nodeType":"357","messageId":"358","endLine":73,"endColumn":28},{"ruleId":"355","severity":1,"message":"374","line":75,"column":13,"nodeType":"357","messageId":"358","endLine":75,"endColumn":29},{"ruleId":"369","severity":1,"message":"370","line":89,"column":43,"nodeType":"371","messageId":"372","endLine":89,"endColumn":45},{"ruleId":"369","severity":1,"message":"370","line":113,"column":22,"nodeType":"371","messageId":"372","endLine":113,"endColumn":24},{"ruleId":"363","severity":1,"message":"364","line":167,"column":25,"nodeType":"365","messageId":"366","endLine":167,"endColumn":27},{"ruleId":"375","severity":1,"message":"376","line":238,"column":35,"nodeType":"365","messageId":"377","endLine":241,"endColumn":10},{"ruleId":"375","severity":1,"message":"376","line":245,"column":37,"nodeType":"365","messageId":"377","endLine":249,"endColumn":10},{"ruleId":"363","severity":1,"message":"364","line":20,"column":32,"nodeType":"365","messageId":"366","endLine":20,"endColumn":34},{"ruleId":"351","severity":1,"message":"378","line":44,"column":25,"nodeType":"379","endLine":44,"endColumn":29},{"ruleId":"355","severity":1,"message":"356","line":12,"column":5,"nodeType":"357","messageId":"358","endLine":12,"endColumn":6},{"ruleId":"355","severity":1,"message":"380","line":8,"column":9,"nodeType":"357","messageId":"358","endLine":8,"endColumn":19},{"ruleId":"355","severity":1,"message":"381","line":9,"column":9,"nodeType":"357","messageId":"358","endLine":9,"endColumn":22},{"ruleId":"351","severity":1,"message":"382","line":128,"column":8,"nodeType":"353","endLine":128,"endColumn":22,"suggestions":"383"},{"ruleId":"384","severity":1,"message":"385","line":172,"column":17,"nodeType":"386","endLine":175,"endColumn":23},{"ruleId":"387","severity":1,"message":"388","line":195,"column":19,"nodeType":"389","messageId":"390","endLine":195,"endColumn":39,"fix":"391"},{"ruleId":"363","severity":1,"message":"364","line":25,"column":57,"nodeType":"365","messageId":"366","endLine":25,"endColumn":59},{"ruleId":"363","severity":1,"message":"392","line":59,"column":35,"nodeType":"365","messageId":"393","endLine":59,"endColumn":37},{"ruleId":"363","severity":1,"message":"364","line":68,"column":17,"nodeType":"394","messageId":"395","endLine":68,"endColumn":23},{"ruleId":"363","severity":1,"message":"364","line":71,"column":42,"nodeType":"365","messageId":"366","endLine":71,"endColumn":44},{"ruleId":"363","severity":1,"message":"364","line":88,"column":49,"nodeType":"365","messageId":"366","endLine":88,"endColumn":51},{"ruleId":"369","severity":1,"message":"370","line":36,"column":27,"nodeType":"371","messageId":"372","endLine":36,"endColumn":29},{"ruleId":"363","severity":1,"message":"364","line":24,"column":35,"nodeType":"365","messageId":"366","endLine":24,"endColumn":37},{"ruleId":"351","severity":1,"message":"396","line":21,"column":8,"nodeType":"353","endLine":21,"endColumn":23,"suggestions":"397"},{"ruleId":"363","severity":1,"message":"364","line":38,"column":35,"nodeType":"365","messageId":"366","endLine":38,"endColumn":37},{"ruleId":"355","severity":1,"message":"380","line":8,"column":9,"nodeType":"357","messageId":"358","endLine":8,"endColumn":19},"no-native-reassign",["398"],"no-negated-in-lhs",["399"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["400"],"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","'SelectInfo' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'onPortfolioSelected'. Either include them or remove the dependency array.",["401"],["402"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'LAST_INSTRUMENTS_UPDATE' is assigned a value but never used.","'PORTFOLIO_AVAILABLE_TAGS' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'last_point_long' is assigned a value but never used.","'last_point_short' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'positionExposure'.","unsafeRefs","Assignments to the 'initError' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'CandlesApi' is defined but never used.","'Configuration' is defined but never used.","React Hook useEffect has missing dependencies: 'maxTs' and 'minTs'. Either include them or remove the dependency array.",["403"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property [\"split_groups\"] found.","Property","unnecessarilyComputedProperty",{"range":"404","text":"405"},"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","React Hook useMemo has a missing dependency: 'allOrders'. Either include it or remove the dependency array.",["406"],"no-global-assign","no-unsafe-negation",{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"407","fix":"411"},{"desc":"412","fix":"413"},[7526,7542],"\"split_groups\"",{"desc":"414","fix":"415"},"Update the dependencies array to be: [dispatch]",{"range":"416","text":"417"},"Update the dependencies array to be: [dispatch, onPortfolioSelected, portfolioID]",{"range":"418","text":"419"},{"range":"420","text":"417"},"Update the dependencies array to be: [maxTs, minTs, props.ticker]",{"range":"421","text":"422"},"Update the dependencies array to be: [allOrders, props.tradeId]",{"range":"423","text":"424"},[860,862],"[dispatch]",[2957,2970],"[dispatch, onPortfolioSelected, portfolioID]",[3383,3385],[3301,3315],"[maxTs, minTs, props.ticker]",[613,628],"[allOrders, props.tradeId]"]
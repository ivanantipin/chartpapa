/**
* API
* UI API
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis


import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authenticate
import io.ktor.auth.authentication
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.route
import org.openapitools.server.Paths

@KtorExperimentalLocationsAPI
fun Route.PortfoliosApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/portfolios/{portfolio}/add/orders/") {
            authenticate("Basic") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "message" : "message",
                  "status" : "ok"
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
            }
    }


    route("/portfolios/{portfolio}/add/trades/") {
            authenticate("Basic") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "message" : "message",
                  "status" : "ok"
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
            }
    }


    get<Paths.portfoliosAvailableInstrumentsMetaList> {  _: Paths.portfoliosAvailableInstrumentsMetaList ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "discrete_metas" : [ {
                "values" : [ "values", "values" ],
                "name" : "name"
              }, {
                "values" : [ "values", "values" ],
                "name" : "name"
              } ],
              "continuous_metas" : [ {
                "min" : 0.8008281904610115,
                "max" : 6.027456183070403,
                "name" : "name"
              }, {
                "min" : 0.8008281904610115,
                "max" : 6.027456183070403,
                "name" : "name"
              } ]
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }


    get<Paths.portfoliosAvailableTagsList> {  _: Paths.portfoliosAvailableTagsList ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "discrete_metas" : [ {
                "values" : [ "values", "values" ],
                "name" : "name"
              }, {
                "values" : [ "values", "values" ],
                "name" : "name"
              } ],
              "continuous_metas" : [ {
                "min" : 0.8008281904610115,
                "max" : 6.027456183070403,
                "name" : "name"
              }, {
                "min" : 0.8008281904610115,
                "max" : 6.027456183070403,
                "name" : "name"
              } ]
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }


    route("/portfolios/{portfolio}/clear/") {
            authenticate("Basic") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "success" : true,
                  "message" : "message"
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
            }
    }


    route("/portfolios/create/") {
            authenticate("Basic") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "name" : "name",
                  "description" : "description",
                  "created_date" : "2000-01-23T04:56:07.000+00:00",
                  "benchmark" : "benchmark"
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
            }
    }


    delete<Paths.portfoliosDeleteDelete> {  _: Paths.portfoliosDeleteDelete ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }


    get<Paths.portfoliosList> {  _: Paths.portfoliosList ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "description" : "description",
              "created_date" : "2000-01-23T04:56:07.000+00:00",
              "benchmark" : "benchmark"
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }


    get<Paths.portfoliosOrdersList> {  _: Paths.portfoliosOrdersList ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "place_time" : 2147483647,
              "symbol" : "symbol",
              "side" : "buy",
              "discrete_tags" : {
                "key" : "discrete_tags"
              },
              "update_time" : 2147483647,
              "trade_id" : "trade_id",
              "execution_price" : 7.061401241503109,
              "continuous_tags" : {
                "key" : 6.027456183070403
              },
              "portfolio" : "portfolio",
              "price" : 2.3021358869347655,
              "qty" : 1.4658129805029452,
              "id" : 0,
              "order_id" : "order_id",
              "order_type" : "limit",
              "status" : "filled"
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }


    get<Paths.portfoliosTradesList> {  _: Paths.portfoliosTradesList ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "symbol" : "symbol",
              "side" : "long",
              "trade_id" : "trade_id",
              "close_price" : 2.3021358869347655,
              "discrete_tags" : {
                "key" : "discrete_tags"
              },
              "continuous_tags" : {
                "key" : 0.8008281904610115
              },
              "portfolio" : "portfolio",
              "qty" : 6.027456183070403,
              "open_time" : -2147483648,
              "close_time" : 2147483647,
              "open_price" : 5.637376656633329,
              "pnl" : 7.061401241503109
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }

}

/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Annotations
 */
export interface Annotations {
    /**
     * 
     * @type {Array<Label>}
     * @memberof Annotations
     */
    labels: Array<Label>;
    /**
     * 
     * @type {Array<HLine>}
     * @memberof Annotations
     */
    lines: Array<HLine>;
}

/**
 * 
 * @export
 * @interface HLine
 */
export interface HLine {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HLine
     */
    attributes: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof HLine
     */
    end: string;
    /**
     * 
     * @type {number}
     * @memberof HLine
     */
    level: number;
    /**
     * 
     * @type {string}
     * @memberof HLine
     */
    start: string;
}

/**
 * 
 * @export
 * @interface InstrId
 */
export interface InstrId {
    /**
     * 
     * @type {string}
     * @memberof InstrId
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InstrId
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InstrId
     */
    market: string;
    /**
     * 
     * @type {string}
     * @memberof InstrId
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InstrId
     */
    source: string;
}

/**
 * 
 * @export
 * @interface Label
 */
export interface Label {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Label
     */
    attributes: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof Label
     */
    level: number;
    /**
     * 
     * @type {string}
     * @memberof Label
     */
    time: string;
}

/**
 * 
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * 
     * @type {Array<InstrId>}
     * @memberof Metadata
     */
    instrIds?: Array<InstrId>;
    /**
     * 
     * @type {number}
     * @memberof Metadata
     */
    period?: number;
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100 = '100',
        _101 = '101',
        _102 = '102',
        _103 = '103',
        _200 = '200',
        _201 = '201',
        _202 = '202',
        _203 = '203',
        _204 = '204',
        _205 = '205',
        _206 = '206',
        _207 = '207',
        _208 = '208',
        _226 = '226',
        _300 = '300',
        _301 = '301',
        _302 = '302',
        _303 = '303',
        _304 = '304',
        _305 = '305',
        _307 = '307',
        _308 = '308',
        _400 = '400',
        _401 = '401',
        _402 = '402',
        _403 = '403',
        _404 = '404',
        _405 = '405',
        _406 = '406',
        _407 = '407',
        _408 = '408',
        _409 = '409',
        _410 = '410',
        _411 = '411',
        _412 = '412',
        _413 = '413',
        _414 = '414',
        _415 = '415',
        _416 = '416',
        _417 = '417',
        _418 = '418',
        _419 = '419',
        _420 = '420',
        _421 = '421',
        _422 = '422',
        _423 = '423',
        _424 = '424',
        _426 = '426',
        _428 = '428',
        _429 = '429',
        _431 = '431',
        _451 = '451',
        _500 = '500',
        _501 = '501',
        _502 = '502',
        _503 = '503',
        _504 = '504',
        _505 = '505',
        _506 = '506',
        _507 = '507',
        _508 = '508',
        _509 = '509',
        _510 = '510',
        _511 = '511'
    }
}

/**
 * 
 * @export
 * @interface Ohlc
 */
export interface Ohlc {
    /**
     * 
     * @type {number}
     * @memberof Ohlc
     */
    close: number;
    /**
     * 
     * @type {string}
     * @memberof Ohlc
     */
    dateTime: string;
    /**
     * 
     * @type {number}
     * @memberof Ohlc
     */
    high: number;
    /**
     * 
     * @type {number}
     * @memberof Ohlc
     */
    low: number;
    /**
     * 
     * @type {number}
     * @memberof Ohlc
     */
    open: number;
    /**
     * 
     * @type {number}
     * @memberof Ohlc
     */
    range?: number;
    /**
     * 
     * @type {number}
     * @memberof Ohlc
     */
    volume: number;
}

/**
 * 
 * @export
 * @interface TimePoint
 */
export interface TimePoint {
    /**
     * 
     * @type {string}
     * @memberof TimePoint
     */
    time: string;
    /**
     * 
     * @type {number}
     * @memberof TimePoint
     */
    value: number;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * MainControllerApi - fetch parameter creator
 * @export
 */
export const MainControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addMetadata
         * @param {string} metadata metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMetadataUsingPUT(metadata: string, options: any = {}): FetchArgs {
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling addMetadataUsingPUT.');
            }
            const localVarPath = `/put_meta`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (metadata !== undefined) {
                localVarQueryParameter['metadata'] = metadata;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAnnotations
         * @param {InstrId} instrId instrId
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsUsingPOST(instrId: InstrId, interval?: string, options: any = {}): FetchArgs {
            // verify required parameter 'instrId' is not null or undefined
            if (instrId === null || instrId === undefined) {
                throw new RequiredError('instrId','Required parameter instrId was null or undefined when calling getAnnotationsUsingPOST.');
            }
            const localVarPath = `/get_annotations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InstrId" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(instrId || {}) : (instrId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOhlcs
         * @param {InstrId} instrId instrId
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOhlcsUsingPOST(instrId: InstrId, interval?: string, options: any = {}): FetchArgs {
            // verify required parameter 'instrId' is not null or undefined
            if (instrId === null || instrId === undefined) {
                throw new RequiredError('instrId','Required parameter instrId was null or undefined when calling getOhlcsUsingPOST.');
            }
            const localVarPath = `/get_ohlcs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InstrId" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(instrId || {}) : (instrId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSeries
         * @param {Array<InstrId>} instrId codes
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesUsingPOST(instrId: Array<InstrId>, interval?: string, options: any = {}): FetchArgs {
            // verify required parameter 'instrId' is not null or undefined
            if (instrId === null || instrId === undefined) {
                throw new RequiredError('instrId','Required parameter instrId was null or undefined when calling getSeriesUsingPOST.');
            }
            const localVarPath = `/get_series`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;InstrId&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(instrId || {}) : (instrId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instrumentsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/instruments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loadAllMetas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAllMetasUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/metas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MainControllerApi - functional programming interface
 * @export
 */
export const MainControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addMetadata
         * @param {string} metadata metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMetadataUsingPUT(metadata: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MainControllerApiFetchParamCreator(configuration).addMetadataUsingPUT(metadata, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getAnnotations
         * @param {InstrId} instrId instrId
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsUsingPOST(instrId: InstrId, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Annotations> {
            const localVarFetchArgs = MainControllerApiFetchParamCreator(configuration).getAnnotationsUsingPOST(instrId, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getOhlcs
         * @param {InstrId} instrId instrId
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOhlcsUsingPOST(instrId: InstrId, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Ohlc>> {
            const localVarFetchArgs = MainControllerApiFetchParamCreator(configuration).getOhlcsUsingPOST(instrId, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getSeries
         * @param {Array<InstrId>} instrId codes
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesUsingPOST(instrId: Array<InstrId>, interval?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: Array<TimePoint>; }> {
            const localVarFetchArgs = MainControllerApiFetchParamCreator(configuration).getSeriesUsingPOST(instrId, interval, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instrumentsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InstrId>> {
            const localVarFetchArgs = MainControllerApiFetchParamCreator(configuration).instrumentsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loadAllMetas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAllMetasUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Metadata>> {
            const localVarFetchArgs = MainControllerApiFetchParamCreator(configuration).loadAllMetasUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MainControllerApi - factory interface
 * @export
 */
export const MainControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary addMetadata
         * @param {string} metadata metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMetadataUsingPUT(metadata: string, options?: any) {
            return MainControllerApiFp(configuration).addMetadataUsingPUT(metadata, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getAnnotations
         * @param {InstrId} instrId instrId
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotationsUsingPOST(instrId: InstrId, interval?: string, options?: any) {
            return MainControllerApiFp(configuration).getAnnotationsUsingPOST(instrId, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getOhlcs
         * @param {InstrId} instrId instrId
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOhlcsUsingPOST(instrId: InstrId, interval?: string, options?: any) {
            return MainControllerApiFp(configuration).getOhlcsUsingPOST(instrId, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getSeries
         * @param {Array<InstrId>} instrId codes
         * @param {string} [interval] interval
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesUsingPOST(instrId: Array<InstrId>, interval?: string, options?: any) {
            return MainControllerApiFp(configuration).getSeriesUsingPOST(instrId, interval, options)(fetch, basePath);
        },
        /**
         * 
         * @summary instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instrumentsUsingGET(options?: any) {
            return MainControllerApiFp(configuration).instrumentsUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary loadAllMetas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAllMetasUsingGET(options?: any) {
            return MainControllerApiFp(configuration).loadAllMetasUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * MainControllerApi - object-oriented interface
 * @export
 * @class MainControllerApi
 * @extends {BaseAPI}
 */
export class MainControllerApi extends BaseAPI {
    /**
     * 
     * @summary addMetadata
     * @param {string} metadata metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public addMetadataUsingPUT(metadata: string, options?: any) {
        return MainControllerApiFp(this.configuration).addMetadataUsingPUT(metadata, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getAnnotations
     * @param {InstrId} instrId instrId
     * @param {string} [interval] interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public getAnnotationsUsingPOST(instrId: InstrId, interval?: string, options?: any) {
        return MainControllerApiFp(this.configuration).getAnnotationsUsingPOST(instrId, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getOhlcs
     * @param {InstrId} instrId instrId
     * @param {string} [interval] interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public getOhlcsUsingPOST(instrId: InstrId, interval?: string, options?: any) {
        return MainControllerApiFp(this.configuration).getOhlcsUsingPOST(instrId, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getSeries
     * @param {Array<InstrId>} instrId codes
     * @param {string} [interval] interval
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public getSeriesUsingPOST(instrId: Array<InstrId>, interval?: string, options?: any) {
        return MainControllerApiFp(this.configuration).getSeriesUsingPOST(instrId, interval, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary instruments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public instrumentsUsingGET(options?: any) {
        return MainControllerApiFp(this.configuration).instrumentsUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loadAllMetas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public loadAllMetasUsingGET(options?: any) {
        return MainControllerApiFp(this.configuration).loadAllMetasUsingGET(options)(this.fetch, this.basePath);
    }

}

